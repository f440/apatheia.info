<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unix | apatheia.info]]></title>
  <link href="http://apatheia.info/blog/categories/unix/atom.xml" rel="self"/>
  <link href="http://apatheia.info/"/>
  <updated>2013-02-06T00:16:24+09:00</updated>
  <id>http://apatheia.info/</id>
  <author>
    <name><![CDATA[f440]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trickleを使って帯域制限をする]]></title>
    <link href="http://apatheia.info/blog/2013/01/01/network-restriction-using-trickle/"/>
    <updated>2013-01-01T17:05:00+09:00</updated>
    <id>http://apatheia.info/blog/2013/01/01/network-restriction-using-trickle</id>
    <content type="html"><![CDATA[<p>ネットワーク経由で大量のデータをやりとりしたいが、メインのサービスには影響を与えたくないという場合がよくある。<code>rsync</code>や<code>scp</code> など、大きなファイルの転送を考慮されたコマンドではネットワーク帯域を制限するオプションが用意されていることも多いが、自作のツールなどに帯域制限を実装するとなるとかなり面倒くさいことになる。</p>

<!-- more -->


<p>Linux で帯域制限をしたい場合、tc や cgroup を使う方法がよく知られている。ただ、「あるコマンドにネットワークが占領されないように穏やかに実行したい」というニーズに対しては大げさで、またオプションが難解だったり管理権限が必要だったりといったことから二の足を踏む感じのものだった。もっと普段使いに適したツールがないものかと探していたところ、こういったシーンでは<a href="http://monkey.org/~marius/pages/?page=trickle" title="trickle公式">Tricle</a>がかなり有効だと言うことがわかった。</p>

<h2>インストール</h2>

<p>Debian, Ubuntu なら公式からパッケージが提供されている。RHEL 系 OS であれば、EPEL にパッケージがあるのでそちらを利用。</p>

<h2>使い方</h2>

<h3>trickle</h3>

<p>コマンドの前に <code>trickle</code> をつけるだけで、簡単に帯域制限が実現できる。とりあえず、「<code>-d n</code>で n KByte/sec にダウンロードが制限」、「<code>-u n</code>で n KByte/sec に制限」だけ覚えておけばいい。</p>

<pre><code># wget のダウンロード速度を 20 KBpsに制限する例
#  (本当は wget も curl も --limit-rate オプションが元々あるので、こんなことしなくても大丈夫)
trickle -d 20 wget --verbose http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/2012.12.01/archlinux-2012.12.01-dual.iso
</code></pre>

<p>実行時、<code>trickled</code> が見つからないというメッセージが出るが、これは<code>-s</code>(standaloneモード)をつけることで抑制できる。</p>

<h3>trickled</h3>

<p><code>trickled</code> というプログラムも利用できるようになって、<code>tricle</code>と同様にオプション<code>-d</code>, <code>-u</code>が設定可能。<code>trickled</code>を一度起動するとデーモンとなり、以降<code>trickle</code>を使って起動したコマンドの帯域は、<code>trickled</code>起動時のオプションで設定した値までに制限される。複数個のプログラムを <code>trickle</code> で起動した場合、使用している帯域の総和が <code>trickled</code>の設定値に従うことになる。</p>

<h2>参考</h2>

<ul>
<li><a href="http://monkey.org/~marius/pages/?page=trickle" title="trickle公式">配布元</a></li>
<li><a href="http://monkey.org/~marius/trickle/trickle.pdf">仕組み</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サブコマンドを sub で処理する]]></title>
    <link href="http://apatheia.info/blog/2012/10/07/sub-for-subcommands/"/>
    <updated>2012-10-07T22:13:00+09:00</updated>
    <id>http://apatheia.info/blog/2012/10/07/sub-for-subcommands</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/37signals/sub">sub</a> は <a href="http://37signals.com/">37signals</a> が公開しているスクリプト群。サブコマンド付きのコマンドを作りたいとき、補完やヘルプメッセージなどの便利な機能を提供してくれる。</p>

<!-- more -->


<h2>使い方</h2>

<p>以下の簡単なコマンドを作って、動作を確認してみることにする。</p>

<pre><code>ex. browse safari http://google.com/

コマンド browse にサブコマンドでブラウザ(safari, chrome, opera, ...)を与え、
最後の引数で渡された URL が開く。URL が渡されなければ、ブラウザの起動のみ行う。
</code></pre>

<p>なお、確認はすべて Mac OS X 10.8 上 の zsh で行っている。</p>

<h3>初期化</h3>

<pre><code>$ git clone git://github.com/37signals/sub.git browse
$ cd browse
$ ./prepare.sh browse
# 以下のメッセージが表示される

Preparing your 'browse' sub!
Done! Enjoy your new sub! If you're happy with your sub, run:

    rm -rf .git
    git init
    git add .
    git commit -m 'Starting off browse'
    ./bin/browse init

Made a mistake? Want to make a different sub? Run:
    git add .
    git checkout -f
Thanks for making a sub!
</code></pre>

<p>言われたとおり、コマンドを実行</p>

<pre><code>$ rm -rf .git
$ git init
$ git add .
$ git commit -m 'Starting off foo'
$ ./bin/foo init
# 以下のメッセージが表示される。パスは作業ディレクトリに応じて変わる。

# Load browse automatically by adding
# the following to ~/.zshenv:

eval "$(/XXXXXXXX/browse/bin/browse init -)"
</code></pre>

<p>最後に表示されるコマンドを実行することにより、補完が有効になる(XXXXXXXX は作業ディレクトリに応じて変わる)。<code>browse he[tab]</code> を実行してみよう。</p>

<pre><code>$ browse help
Usage: browse &lt;command&gt; [&lt;args&gt;]
Some useful browse commands are:
   commands               List all browse commands

See 'browse help &lt;command&gt;' for information on a specific command.
</code></pre>

<p>無事ヘルプが表示されたら、セットアップはうまくいっている。</p>

<h3>サブコマンド作成</h3>

<p>まずはディレクトリ構造を見てみよう。</p>

<pre><code>$ gfind ! -path './.git/*'
.
./.git
./bin
./bin/browse
./completions
./completions/browse.bash
./completions/browse.zsh
./libexec
./libexec/browse
./libexec/browse-commands
./libexec/browse-completions
./libexec/browse-help
./libexec/browse-init
./libexec/browse-sh-shell
./LICENSE
./share
./share/browse
./share/browse/example
</code></pre>

<p>libexec/browse-SUBCOMMAND  形式でファイルを作れば、サブコマンドを追加できる。早速追加してみよう。</p>

<pre><code>$ vim libexec/browse-safari

    #!/usr/bin/env bash
    set -e
    open -a safari $1

$ chomod a+x libexec/browse-safari
</code></pre>

<p>サブコマンドはシェル補完できるので、<code>browse saf[tab] http://google.com</code> といった入力が可能。問題が無ければブラウザが起動する。 ただ、これだけだと使い方がわかりづらいので、ヘルプを追加してみる。</p>

<pre><code>$ vim libexec/browse-safari

    #!/usr/bin/env bash
    #
    # Usage: browse safari [URL]
    # Summary: safari で指定の URL を開く
    # Help: safari を利用して、引数で渡された URL を開く
    # 何も URL を指定しなければ、ブラウザの起動のみ

    set -e

    open -a safari $1
</code></pre>

<p>ヘルプに反映されていることを確認。</p>

<pre><code>$ browse help safari
Usage: browse safari [URL]

safari を利用して、引数で渡された URL を開く
何も URL を指定しなければ、ブラウザの起動のみ
</code></pre>

<p>引数なしの <code>help</code> もメッセージが変わっている。</p>

<pre><code>$ browse help
Usage: browse &lt;command&gt; [&lt;args&gt;]

Some useful browse commands are:
   commands               List all browse commands
   safari                 safari で指定の URL を開く

See 'browse help &lt;command&gt;' for information on a specific command.
</code></pre>

<p>あとは、libexec-chrome, libexec-opera, ... とサブコマンドを追加していくことができる。</p>

<h2>雑感</h2>

<p>プログラムを書いてもシェルの補完設定までは手が回らないことが多いので、簡単にサポートしてくれる仕組みが提供されているのはかなりよかった。</p>

<p>シェルスクリプトの書き方はかなりばらつきがあり、自分の周りでも割とフリーダムな状況になっていたので、邪魔にならない程度のフレームワークがあればいいな、と思っていた。そういう用途にも合っていると思う。</p>

<h2>参考</h2>

<ul>
<li><a href="http://37signals.com/svn/posts/3264-automating-with-convention-introducing-sub">37signalsのブログでの紹介</a></li>
<li><a href="https://github.com/37signals/sub">GitHubのリポジトリ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログレスバーを簡単に表示できるコマンド pv]]></title>
    <link href="http://apatheia.info/blog/2011/12/17/pv/"/>
    <updated>2011-12-17T00:00:00+09:00</updated>
    <id>http://apatheia.info/blog/2011/12/17/pv</id>
    <content type="html"><![CDATA[<p>プログレスバーを簡単に表示できる <code>pv</code> について説明する。</p>

<!-- more -->


<h2>インストール方法</h2>

<p>自分の環境(debian 6.0.3)だと <code>apt</code>
でインストール出来る。RHEL系なら<a href="http://pkgs.repoforge.org/pv/">ここ</a>かな。</p>

<h2>使い方</h2>

<p>端的に言うと、「cat ＋ 標準エラー出力にプログレスバー」という動きを取る。</p>

<pre><code>f440@abhoth[10]:~$ yes | pv &gt;/dev/null
 529MB 0:00:08 [67.2MB/s] [       &lt;=&gt;                                         ]
</code></pre>

<p>8秒で合計529MB、秒間67.2MBくらいで「y」の文字が <code>pv</code> を通り抜けてるのがわかる。 <code>-l</code>
オプションをつけると行モードになり、転送量ではなく転送行数を調べられる。</p>

<pre><code>f440@abhoth[10]:~$ yes | pv -l &gt;/dev/null
 435k 0:00:10 [45.9k/s] [          &lt;=&gt;                                        ]
</code></pre>

<p>10秒で435行、秒間45900行くらいが通り抜けてるのがわかる。</p>

<p>他にもおもしろいオプションとして <code>-L</code> っていうのがあって、パイプから出てく流量を制限することが出来る。</p>

<h2>用途</h2>

<p><code>mysqldump</code> とか <code>mysql</code>にくっつけてダンプ、リストアの完了時刻を予想する、とかかな。</p>

<p>Webで見てると、<code>nc</code> とか <code>tcpdump</code> とかと組み合わせてる例がある。</p>

<p>自分で作ったコマンドとかに、簡単に進行状況表示がくっつけられるのは便利。</p>
]]></content>
  </entry>
  
</feed>
