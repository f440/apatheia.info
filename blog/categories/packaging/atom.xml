<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: packaging | apatheia.info]]></title>
  <link href="http://apatheia.info/blog/categories/packaging/atom.xml" rel="self"/>
  <link href="http://apatheia.info/"/>
  <updated>2013-06-17T09:53:21+09:00</updated>
  <id>http://apatheia.info/</id>
  <author>
    <name><![CDATA[f440]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[omnibus を使って オムニバスインストーラーを作成する]]></title>
    <link href="http://apatheia.info/blog/2013/05/07/create-ominibus-installer/"/>
    <updated>2013-05-07T01:41:00+09:00</updated>
    <id>http://apatheia.info/blog/2013/05/07/create-ominibus-installer</id>
    <content type="html"><![CDATA[<p>Chef のインストールは結構面倒くさかったんだけど、<a href="http://www.opscode.com/chef/install/">オムニバスインストーラー</a>が出たことで状況はがらっと変わって、簡単に導入できるようになった。このオムニバスインストーラーの仕組みは汎用的に作られているので、他のツールでも適用できるという話。</p>

<!-- more -->


<h2>オムニバスインストーラーについて</h2>

<p>Chef のオムニバスインストーラーを実行すると以下のようなディレクトリ構成でファイルが置かれる:</p>

<ul>
<li>/opt/chef/bin/ ... Chef 関連のスクリプト</li>
<li>/opt/chef/embedded/ ... ruby インタプリタ、Chef とその他依存パッケージ</li>
<li>(/usr/bin/ ... /opt/chef/bin/ 以下のものがシンボリックリンクが配置される)</li>
</ul>


<p>以上の通り、<code>/opt/chef</code> の中に動作に必要なものがごっそり置かれる。アプリケーションレベルでプログラミングの処理系を持っちゃうというのはこれに限らずよく見る光景で、理由としてはパッケージ提供されていない最新版が使いたかったり、バージョンアップやライブラリインストールの影響範囲を限定させたかったりだと思う。</p>

<p>ここしばらくは手軽なパッケージ作成ツールとして<a href="https://github.com/jordansissel/fpm">fpm</a>がよく使われているけど、オムニバスインストーラーは<a href="https://github.com/opscode/omnibus-ruby">omnibus</a>という「ビルドツール」＋「fpm ラッパー」といった感じのもので作られている。以下は実際に <a href="https://github.com/opscode/omnibus-ruby">omnibus</a> を使ったインストーラー作成の手順についてまとめる。</p>

<h2>パッケージ作成</h2>

<p><a href="https://github.com/etsy/statsd">statsd</a> および <a href="https://github.com/etsy/statsd">statsd</a> を動かすために必要な Node.js を /opt/statsd にインストールする RPM, Deb パッケージの作成を行ってみる。</p>

<h3>環境</h3>

<ul>
<li>Macbook Air Mountain Lion</li>
<li>Ruby 2.0.0-p0</li>
<li>Vagrant 1.2.2</li>
</ul>


<h3>手順</h3>

<pre><code># omnibus のインストール
gem install omnibus

# 必要となる vagrant 用の plugin をインストール
vagrant plugin install vagrant-omnibus
vagrant plugin install vagrant-berkshelf

# プロジェクトディレクトリの作成(ディレクトリ名は `omnibus-プロジェクト` となる)
omnibus project statsd
cd omnibus-statsd

# プロジェクトディレクトリ内のファイルを適宜修正:
    Berksfile
      Berkshelf 用の設定。変更する必要無い。
    Vagrantfile
      Vagrant 用の設定。2013-06-07 現在だと CentOS 5, 6 Ubuntu 10.04, 11.04, 12.04 の設定が導入済み。
    README.md
    omnibus.rb.example
      成果物を S3 上にキャッシュする場合などに利用。使わないなら気にしなくていい。
    config/projects/statsd.rb
      後述
    config/software/*
      後述
    package-scripts/statsd/*
      インストール時、アンインストール時などに実行したいスクリプトなど。
</code></pre>

<p>この中で、実際のビルドプロセスを定義するのは、config/projects/ 以下と config/software 以下になる。</p>

<p><code>config/projects/</code> はプロジェクトの設定を格納するディレクトリで、初期状態では statsd 用のプロジェクトファイル <code>config/projects/statsd.rb</code> が作られている。このファイルを修正していくことになる。</p>

<pre><code>name "statsd"
maintainer "f440"
homepage "https://github.com/f440/omnibus-statsd"

install_path    "/opt/statsd"
build_version   "0.6.0"
build_iteration 1

dependency "preparation"
dependency "node"
dependency "statsd"

exclude "\.git*"
</code></pre>

<p>おおむね想像がつく名前だけど、dependency だけはよく分からないと思う。dependency で指定したものはプロジェクトを構成する software という扱いで、<code>config/software/</code> 以下でその設定を行っていく。</p>

<p>software の例を示す。典型的な例だと、指定した URL からダウンロードしてきたものを一時ディレクトリで展開して、<code>configure &amp;&amp; make &amp;&amp; make install</code> を実行、などだが今回の作業では Node.js のバイナリを展開して <code>/opt/embedded</code> 以下にコピーしているだけである。</p>

<pre><code>name "node"
version "0.10.5"

source :url =&gt; "http://nodejs.org/dist/v0.10.5/node-v0.10.5-linux-x64.tar.gz",
       :md5 =&gt; "fb65723d395c559393201dd41e0eb275"

relative_path "node-v0.10.5-linux-x64"

build do
  command "rsync -av . #{install_dir}/embedded/"
end
</code></pre>

<p>必要となる software の設定を全部そろえたらビルドを実行する。マシンの起動、Chef のインストール、omnibus の Cookbook 実行、ビルド環境構築、ビルド実行、パッケージ作成 といったことが行われることになるため、初回はかなり待つことになる。</p>

<pre><code>vagrant up
(vagrant up centos-6 など、直接マシンを指定してもいい)
(もし Linux 上で作業しているのであれば、omnibus build project statsd で直接パッケージ作成を開始出来る)
</code></pre>

<p>問題なければ、pkg/ 以下に statsd-0.6.0-1.el6.x86_64.rpm, statsd_0.6.0-1.ubuntu.12.04_amd64.deb といったファイルが出来る。</p>

<h2>まとめ</h2>

<p>やっていることは <a href="https://github.com/jordansissel/fpm">fpm</a> でパッケージを作っているだけなんだけど、<a href="http://www.vagrantup.com/">Vagrant</a> x <a href="http://berkshelf.com/">Berkshelf</a> x <a href="http://www.opscode.com/chef/">Chef</a> のコンビネーションのおかげで、パッケージとそのパッケージを作るための環境が簡単に手に入るのはとてもいい。複数環境のパッケージを作る予定がなくっても、最初から<a href="https://github.com/opscode/omnibus-ruby">omnibus</a>上でパッケージを作れるようにしておくと運用が楽そう。</p>

<h2>備考</h2>

<p>似たようなツールとして、<a href="https://github.com/joemiller/bunchr">bunchr</a> が存在する。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/etsy/statsd">Statsd</a></li>
<li><a href="http://www.opscode.com/chef/install/">Install Chef</a></li>
<li><a href="https://github.com/opscode/omnibus-ruby">omnibus</a></li>
<li><a href="https://github.com/joemiller/bunchr">bunchr</a></li>
<li><a href="https://github.com/jordansissel/fpm">fpm</a></li>
<li><a href="http://www.vagrantup.com/">Vagrant</a></li>
<li><a href="http://berkshelf.com/">Berkshelf</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fpm で Mesos の RPM を作るまで]]></title>
    <link href="http://apatheia.info/blog/2013/05/03/create-mesos-rpm-using-fpm/"/>
    <updated>2013-05-03T17:24:00+09:00</updated>
    <id>http://apatheia.info/blog/2013/05/03/create-mesos-rpm-using-fpm</id>
    <content type="html"><![CDATA[<p><a href="http://incubator.apache.org/mesos/">Mesos</a> をインストールするとき各マシンでビルドはしんどいので、<a href="https://github.com/jordansissel/fpm">fpm</a> で Mesos の RPM を作ってインストールしている。ビルドからパッケージ作成までの作業ログを残しておく。</p>

<!-- more -->


<ul>
<li><a href="https://github.com/jordansissel/fpm">fpm</a> は Ruby の gem や Node.js の npm などのプログラミング言語のライブラリ、あるいは直接ディレクトリから RPM やら Deb やらのパッケージを作成するソフトウェア。</li>
<li><a href="http://incubator.apache.org/mesos/">Mesos</a> はクラスタ構成のリソースをよしなに管理するソフトウェア。

<ul>
<li>今回の話では具体的な使い方までは触れない</li>
</ul>
</li>
</ul>


<h1>手順</h1>

<p>作業環境は CentOS 6.4 x86_64。</p>

<p> Ruby をインストール。</p>

<pre><code>sudo yum install ruby.x86_64 rubygems ruby-devel.x86_64 rpm-build.x86_64
</code></pre>

<p>fpm をインストール。</p>

<pre><code>sudo gem install fpm --no-rdoc --no-ri
</code></pre>

<p>Mesos のソースをダウンロード、展開。</p>

<pre><code>curl -LO http://ftp.meisei-u.ac.jp/mirror/apache/dist/incubator/mesos/mesos-0.10.0-incubating/mesos-0.10.0-incubating.tar.gz
tar xf mesos-0.10.0-incubating.tar.gz
cd mesos-0.10.0
</code></pre>

<p>Mesos のビルドに必要なパッケージをインストール。</p>

<pre><code>sudo yum install gcc-c++.x86_64 patch.x86_64 python-devel.x86_64 \
  cppunit-devel.x86_64 java-1.6.0-openjdk-devel.x86_64
</code></pre>

<p>ビルド。今回は、configure のオプションで Redhat っぽい配置を指定している。<code>/opt/mesos</code> とか <code>/usr/local/mesos</code> に全部まとめたければ --prefix を使うなど、このあたりはお好みで。
<code>make install</code> 時には書き込み可能な場所を DESTDIR で指定。説明中では、<code>/tmp/mesos</code> を利用している。</p>

<pre><code>JAVA_HOME=/etc/alternatives/java_sdk ./configure \
  --bindir=/usr/bin --sbindir=/usr/sbin --libexecdir=/usr/libexec \
  --localstatedir=/var --libdir=/usr/lib64 --includedir=/usr/include \
  --datarootdir=/usr/share
make
make install DESTDIR=/tmp/mesos
</code></pre>

<p>fpm でパッケージを作成。詳細は fpm --help を参照。注意点としては、<code>--description</code> は RPM のメタ情報 <code>description</code>, <code>summary</code> で兼用されるので、あまり長い情報を入れると <code>yum search</code> とかがごちゃごちゃすることになる。適度に切り詰めた方がいい。</p>

<pre><code>fpm -s dir -t rpm \
  -v 0.10.0 \
  -n mesos \
  -C /tmp/mesos \
  -a x86_64 \
  --license "ASL 2.0" \
  --url "http://incubator.apache.org/mesos/" \
  --description "Dynamic resource sharing for clusters" \
  -d python-devel \
  -d java-1.6.0-openjdk-devel \
  .
</code></pre>

<p>RPM ファイルのメタ情報やファイル一覧をチェック。</p>

<pre><code>rpm -qpi mesos-0.10.0-1.x86_64.rpm
rpm -qpl mesos-0.10.0-1.x86_64.rpm
</code></pre>

<p>あとは、できあがった RPM ファイルを他のマシンに持っていってインストール。</p>

<pre><code>sudo yum install ./mesos-0.10.0-1.x86_64.rpm
</code></pre>
]]></content>
  </entry>
  
</feed>
