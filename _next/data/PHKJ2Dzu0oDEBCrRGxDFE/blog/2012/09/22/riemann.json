{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-09-22-riemann.markdown","path":"2012/09/22/riemann","layout":"post","title":"イベント処理ツール riemannを使う","createdAt":"2012-09-22T09:00:00.000Z","kind":"article","comments":true,"tags":null,"content":"<p>イベント処理ツール <a href=\"http://aphyr.github.com/riemann/\">riemann</a>を使ってみたのでその感想。</p>\n<!-- more -->\n<ul>\n<li>サーバーは clojure で書かれている\n<ul>\n<li>設定ファイルは S 式</li>\n</ul>\n</li>\n<li>クライアントは各言語版がある <a href=\"http://aphyr.github.com/riemann/clients.html\">http://aphyr.github.com/riemann/clients.html</a></li>\n<li>サーバーの状態は riemann-dash という sinatra でできた Web 画面から確認できる</li>\n<li>クライアントからのメッセージはイベントと呼んでる\n<ul>\n<li>host, service, state, time, description, tags, metric, ttl というパラメータを持っている</li>\n</ul>\n</li>\n<li>サーバー、クライアント間は Protocol Buffer で通信する</li>\n</ul>\n<p>公式サイトではサーバーの tar ball と deb パッケージを配布している。動かすためには、Java で実行するだけ。</p>\n<pre><code>$ wget [http://aphyr.com/riemann/riemann-0.1.2.tar.bz2](http://aphyr.com/riemann/riemann-0.1.2.tar.bz2)\n$ tar xf riemann-0.1.2.tar.bz2\n$ cd riemann-0.1.2\n$ bin/riemann etc/riemann.config\n</code></pre>\n<p>設定ファイルを S 式でがりがりかけるのはおもしろくって、riemann だとこんな感じに設定できる:</p>\n<pre><code># 公式サイトの設定例から引用 [http://aphyr.github.com/riemann/configuring.html](http://aphyr.github.com/riemann/configuring.html)\n\n; You can use any options for [https://github.com/drewr/postal.](https://github.com/drewr/postal.)\n;\n; (mailer {:from \"riemann@trioptimum.com\"\n;          :host \"mx1.trioptimum.com\"\n;          :user \"foo\"\n;          :pass \"bar\"})\n\n(streams\n  (where (and (service \"web server\")\n              (state \"exception\"))\n         (tagged \"controller\"\n                 (email \"5551234567@txt.att.net\"))\n         (tagged \"view\"\n                 (email \"delacroix@trioptimum.com\" \"bronson@trioptimum.com\"))\n         (tagged \"model\"\n                 (email \"staff@vonbraun.mil\"))))\n</code></pre>\n<p>「イベント x あるいは y が n 秒以内に m 回発生したらアラート」みたいなのも設定できるみたいなので、監視ツールと組み合わせてもおもしろそう。</p>\n<p>ソフトウェアの内容や使いかっては、 <a href=\"http://fluentd.org/\">fluentd</a>\nととても近いように感じた。それぞれ公式サイトに掲げられているメッセージを比較してみると、fluentd は「Fluentd is a lightweight and flexible log collector」で、riemann は「Riemann is an event stream processor」だった。fluentd はイベントを集計できる形式でログとして残すこと、riemannはイベントストリームから特定の状況をリアルタイムで見つけだすことが主眼ということかな。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://aphyr.github.com/riemann/\">公式サイト</a></li>\n<li><a href=\"http://vimeo.com/45807716\">紹介ビデオ</a></li>\n<li><a href=\"http://blog.boundary.com/2012/03/12/boundary-tech-talks-march-6th-2012/\">紹介ビデオ</a></li>\n<li><a href=\"https://twitter.com/aphyr\">作者 Kyle Kingsbury</a></li>\n<li><a href=\"http://labs.amara.org/2012-07-16-metrics.html\">利用事例</a></li>\n</ul>\n<h3>関連するサービス、同類のソフトウェア</h3>\n<ul>\n<li><a href=\"http://fluentd.org/\">fluentd</a></li>\n<li><a href=\"http://boundary.com/\">boundary</a></li>\n<li><a href=\"http://aws.amazon.com/en/cloudwatch/\">amazon cloudwatch</a></li>\n<li><a href=\"http://www.loggly.com/\">loggly</a></li>\n<li>その他多くの監視ツール</li>\n</ul>\n"}},"__N_SSG":true}