{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-09-22-tumbler-to-octopress.markdown","path":"2012/09/22/tumbler-to-octopress","layout":"post","title":"TumblerからOctopressへの移行","createdAt":"2012-09-22T08:28:00.000Z","kind":"article","comments":true,"tags":["octopress"],"content":"<p>Tumblerでブログ書いていたけど、ローカルで記事書く => フォームに貼り付け => プレビューのサイクルが結構面倒くさいな、と常々思っていたので、Octopressに移行した。</p>\n<p>ホスティングには <a href=\"http://pages.github.com/\">Github Pages</a> を利用している。</p>\n<!-- more -->\n<h2>手順</h2>\n<h3>設定</h3>\n<pre><code>$ git clone git://github.com/imathis/octopress.git octopress\n\n# テーマ入れ替える    \n$ git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash\n$ rake 'install[slash]' # zsh だとクォートなりエスケープするなりしないと、[, ] がメタ文字として解釈される\n# .themes/slash/{source,sass} がルートディレクトリにコピーされる\n</code></pre>\n<p>このままだと header の canonical が設定されないかったので、同梱テンプレート <code>.themes/classic/source/_includes/head.html</code> を参考に <code>./source/_includes/head.html</code> をちょっとといじった。</p>\n<h3>Tumbler の記事をインポート</h3>\n<p><a href=\"http://tsurayogoshi.tumblr.com/archive\">ブログの過去記事</a>を全部インポートする\n( 参考: <a href=\"http://blog.assimov.net/blog/2012/03/24/tumblr-to-octopress-powered-by-jekyll-and-markdown/\">Goodbye Tumblr. Hello, Octopress Powered by Jekyll and Markdown!</a> )</p>\n<pre><code>$ wget -O source/tumblr.rb https://raw.github.com/stephenmcd/jekyll/master/lib/jekyll/migrators/tumblr.rb\n$ vim source/tumblr.rb # format=\"md\" => format=\"markdown\" に書き換え\n$ ruby -rubygems -e 'require \"./source/tumblr\"; Jekyll::Tumblr.process(\"http://tsurayogoshi.tumblr.com\", format=\"markdown\", grab_images=true)'\n$ mv _posts/tumblr/* source/_posts/\n$ mv post source/\n</code></pre>\n<p>後は細かい調整</p>\n<ul>\n<li>画像のパスが tumblr を参照しているので、全部ダウンロードして <code>source/images</code>\n以下に保存</li>\n<li>記事のメタデータ部分\n<ul>\n<li><code>comments: true</code>を追加</li>\n<li><code>tags</code> を <code>categories</code> に書き換え。</li>\n</ul>\n</li>\n<li>各種外部サイト向けパーツの設定</li>\n</ul>\n<p><code>source/post</code> には、tumbler と同じURLでアクセスしたとき、移行後のコンテンツにアクセスするリダイレクト設定が入っている。tumbler の頃からカスタムドメインを使っていた場合は、後述のドメイン設定で前と同じドメインにすればいい。</p>\n<h3>ドメインの設定</h3>\n<p>独自ドメインを使う場合、source/ 以下に CNAME というファイルを作り、そこにドメインを書いておく。その後、指定の IP アドレスに名前を向ける。</p>\n<p>何度かIPアドレスが変更になっているみたいで、別のIPアドレスを利用した説明がネットに残っているけど、古いものだとカスタムドメインが使えるけどusername.github.comからのカスタムドメインへのリダイレクトが有効にならなかったりするので、ちゃんと\n<a href=\"https://help.github.com/articles/setting-up-a-custom-domain-with-pages\">公式の説明</a>のもの\nを参照すること。</p>\n<h3>Github Pages へデプロイ</h3>\n<p><a href=\"http://octopress.org/docs/deploying/github/\">ドキュメント</a>を読めばわかるので詳細は割愛。</p>\n<p><code>source</code> ディレクトリの中身が <code>public</code> 以下に展開されて、ここがプレビュー領域となる。<code>public</code> の中身が <code>_deploy</code> にコピーされて、ここが Github Pages に pushされる。</p>\n<p>git リポジトリのうち <code>master</code> ブランチがは公開用、<code>source</code> が編集用となる。ルーディレクトリに <code>source</code> ブランチ、公開用の <code>_deploy</code> ディレクトリに <code>maste</code> ブランチという二つのリポジトリが配置されることになる。</p>\n<h2>感想</h2>\n<p>vim で書く => すぐに確認 => github にデプロイ => 公開の流れは気持ちいい。tumblr の頃と同じく、markdown で書けるのもとても具合がいい。</p>\n"}},"__N_SSG":true}