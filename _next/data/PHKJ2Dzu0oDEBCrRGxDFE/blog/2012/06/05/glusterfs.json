{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-06-05-glusterfs.markdown","path":"2012/06/05/glusterfs","layout":"post","title":"分散ファイルシステム GlusterFS を使う","createdAt":"2012-06-04T15:00:00.000Z","kind":"article","comments":true,"tags":null,"content":"<p>Webアプリケーションを構築する上で、運用中に発生したファイルをローカルのファイルシステム上に保管すると、スケールを阻害するため好ましくないことが多い。</p>\n<!-- more -->\n<p>そのため、アプリケーションの設計の段階からCDNの利用したり、ファイルの管理だけ別のサービスに切り出したりすることを考慮すべきだけど、いろいろなしがらみのた\nめにどうしてもファイルを複数台のサーバーで共有するようなシステム形態にせざるを得ないことが往々にしてある。</p>\n<p>サーバー間のファイル共有のための方法として、<a href=\"http://code.google.com/p/lsyncd/\">lsyncd</a> や<a href=\"http://www.drbd.org/\">DRBD</a>を使ったり、NASを介したりするなど様々な方法があるけど、[GlusterFS](http://www.gluster.or\ng/) がとても便利。特別な機器を必要とせず、すでにある環境に対して導入でき、信頼性とスケーラビリティのあるクラスタリングファイルシステムを手早く構築するこ\nとができる。</p>\n<p>GlusterFS を簡単に説明すると、以下のような特徴がある:</p>\n<ul>\n<li>分散型ファイルシステム\n<ul>\n<li>SPOFになるような特殊ノードも必要ない</li>\n</ul>\n</li>\n<li>NFSやCIFSでマウント可能\n<ul>\n<li>先日発表された 3.3.0 で、HDFSとの互換性できてHadoopから処理できるようになったり、OpenStack Object Storage API互換の REST APIが提供されたりでいろいろ熱い感じになっている</li>\n</ul>\n</li>\n<li>ストライピングで性能を上げたり、レプリケーションで耐障害性をあげたりすることが可能</li>\n</ul>\n<p>今回は仮想マシンで動作を検証するまでの流れをまとめる。</p>\n<h2>環境構築</h2>\n<p>作業環境として、Mac OS X Lion上のVirtualBoxを利用し、仮想マシンとしてはCentOS 6.2\nx86_64を使う。Windowsでやる場合は<code>vagrant ssh</code>が動かないので、そのあたりを読み替えればできると思う。</p>\n<p>はじめにCentOS 6.2のマシンイメージを作る。</p>\n<pre><code>$ gem install vagrant veewee\n$ mkdir work\n$ cd work\n$ vagrant basebox define CentOS-6.2-x86_64-minimal CentOS-6.2-x86_64-minimal\n$ vagrant basebox build CentOS-6.2-x86_64-minimal # マシンイメージのビルド\n$ vagrant basebox validate CentOS-6.2-x86_64-minimal # チェック\n$ vagrant basebox export CentOS-6.2-x86_64-minimal\n$ vagrant box add CentOS-6.2-x86_64-minimal CentOS-6.2-x86_64-minimal.box\n$ cd ..\n$ rm -rf ./work\n</code></pre>\n<p>次にクラスタ構成の設定。</p>\n<pre><code>$ mkdir -p ~/Documents/vagrant/glusterfs/ # 作業用ディレクトリ作成\n$ cd ~/Documents/vagrant/glusterfs/\n$ vim Vagrantfile # 編集\n</code></pre>\n<p><a href=\"https://gist.github.com/2868494\">https://gist.github.com/2868494</a></p>\n<pre><code>$ vagrant up # 3台の仮想マシン起動\n</code></pre>\n<p>必要となる仮想マシンがそろったので、glusterfsのセットアップを始める。</p>\n<pre><code>$ cd ~/Documents/vagrant/glusterfs # この中は 共有ディレクトリを通して、仮想マシンの/vagrantからも参照可能\n$ curl -LO [http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-3.3.0-1.el6.x86_64.rpm](http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-3.3.0-1.el6.x86_64.rpm)\n$ curl -LO [http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-fuse-3.3.0-1.el6.x86_64.rpm](http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-fuse-3.3.0-1.el6.x86_64.rpm)\n$ curl -LO [http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-server-3.3.0-1.el6.x86_64.rpm](http://download.gluster.org/pub/gluster/glusterfs/LATEST/CentOS/glusterfs-server-3.3.0-1.el6.x86_64.rpm)\n</code></pre>\n<p>仮想マシンに必要となるパッケージをインストールしておく。</p>\n<pre><code>$ brew install parallel # 一台ずつ設定するの面倒なので、gnu parallel 使う\n$ parallel vagrant ssh {} -c sh -c \"sudo yum -y install wget fuse fuse-libs\" ::: host1 host2 host3\n$ parallel vagrant ssh {} -c sh -c \"sudo yum install -y /vagrant/glusterfs-*\" ::: host1 host2 host3 # パッケージインストール\n$ parallel vagrant ssh {} -c sh -c \"/usr/sbin/glusterfs -V\" ::: host1 host2 host3 # 動作確認\n$ parallel vagrant ssh {} -c sh -c \"sudo /sbin/service iptables stop\" ::: host1 host2 host3 # iptables 停止\n$ parallel vagrant ssh {} -c sh -c \"sudo /sbin/service glusterd start\" ::: host1 host2 host3 # 起動\n</code></pre>\n<p>以降、<code>$</code> から始まるのはホストOS、<code>hostX$</code> から始まるのは仮想マシン上のターミナルの説明とする。</p>\n<h2>ストレージプール作成</h2>\n<p>ストレージプールと呼ばれる、サーバー間の信頼済みネットワークを作成する。</p>\n<pre><code>$ vagrant ssh host1\n\nhost1$ sudo gluster peer probe 192.168.56.11 # host2 をプールに追加\nhost1$ sudo gluster peer probe 192.168.56.12 # host3 をプールに追加\n# 自ホスト(host1)の追加は不要\n</code></pre>\n<h2>ボリューム作成</h2>\n<p>ストレージプールを構成したら、ボリュームを作成する。</p>\n<p>ボリュームは「分散するかどうか」「レプリケーションするかどうか」「ストライピングするかどうか」を選ぶことになる。組み合わせることも可能。ひとまず2台構成で分\n散、ストライピング、レプリケーションのそれぞれについて試してみる。</p>\n<h3>分散</h3>\n<p>ファイルをストレージ内のどこかしらに保存しておく形態。追加すればするほど大きなストレージとなるけど、冗長性などは確保されない。</p>\n<p>host1, host2 で分散ボリュームを作ってみる。</p>\n<pre><code>$ parallel vagrant ssh {} -c sh -c \"sudo mkdir -p /export/vol\" ::: host1 host2\n$ vagrant ssh host1\n\nhost1$ sudo gluster volume create vol 192.168.56.10:/export/vol 192.168.56.11:/export/vol\n</code></pre>\n<h3>ストラインピング</h3>\n<p>性能向上を目的として、ファイルを複数に分割して保存しておく形態。RAID0みたいな感じ。</p>\n<p>host2, host3 でストライピングボリュームを作ってみる。</p>\n<pre><code>$ parallel vagrant ssh {} -c sh -c \"sudo mkdir -p /export/vol-striping\" ::: host2 host3  \n$ vagrant ssh host1\n\nhost1 $ sudo gluster volume create vol-striping stripe 2 192.168.56.11:/export/vol-striping 192.168.56.12:/export/vol-striping\n</code></pre>\n<h3>レプリケーション</h3>\n<p>データの複製を作って、複数の場所に保管しておく形態。RAID1みたいな感じ。信頼性が高くなり、ファイルの読み込みも早くなる。</p>\n<p>host1, host3 でレプリケーションボリュームを作ってみる。</p>\n<pre><code>$ parallel vagrant ssh {} -c sh -c \"sudo mkdir -p /export/vol-replica\" ::: host1 host3\n$ vagrant ssh host1\n\nhost1$ sudo gluster volume create vol-replica replica 2 192.168.56.10:/export/vol-replica 192.168.56.12:/export/vol-replica\nhost1$ sudo gluster volume start vol-replica\n</code></pre>\n<h2>利用</h2>\n<h3>マウント</h3>\n<p>OSにマウントしてみる。マウント方法にはNFSやCIFSなども選べるけど、ここではネイティブのglusterfs形式を選んでみる。</p>\n<pre><code>$ vagrant ssh host1\n\nhost1$ sudo mkdir -p /mnt/{vol,vol-striping,vol-replica}\nhost1$ sudo mount -t glusterfs 192.168.56.10:/vol /mnt/vol # 分散\nhost1$ sudo mount -t glusterfs 192.168.56.11:/vol-striping /mnt/vol-striping # ストライピング\nhost1$ sudo mount -t glusterfs 192.168.56.12:/vol-replica /mnt/vol-replica # レプリケーション    \n</code></pre>\n<h3>動作確認</h3>\n<p>はじめに、マウントした結果を見てみる。</p>\n<pre><code>$ df -h /mnt/*\nFilesystem            Size  Used Avail Use% Mounted on\n192.168.56.10:vol      17G  1.9G   14G  12% /mnt/vol\n192.168.56.12:vol-replica\n                      8.4G  949M  7.0G  12% /mnt/vol-replica\n192.168.56.11:vol-striping\n                       17G  1.9G   14G  12% /mnt/vol-striping\n</code></pre>\n<p>分散、ストライピングは2台分を足し合わせた結果になっている。レプリケーションは2台に同じデータが分散されるので、ディスク効率は50%に下がる。</p>\n<h4>分散</h4>\n<p>適当にファイルを作ってみる。</p>\n<pre><code>host1$ sudo touch /mnt/vol/{1..9}\n\n# 保管先をチェック\n\nhost1$ ls /export/vol/ # 1  5  7  8  9\n\nhost2$ ls /export/vol/ # 2  3  4  6\n</code></pre>\n<p>ファイルがばらばらと格納されていることがわかる。</p>\n<h3>ストライピング</h3>\n<pre><code>host1$ sudo vi /mnt/vol-striping/sample.txt # 10M強データをテキストデータを書き込み\n\nhost1$ du -s /mnt/vol-striping/sample.txt # 10256と表示された\nhost1$ ls -l /mnt/vol-striping/sample.txt # サイズが 10484785 と表示された\n\n# 保管先をチェック\nhost2$ du -s /export/vol-striping/sample.txt # 5128 と表示された\nhost2$ ls -l /export/vol-striping/sample.txt # サイズが 10354688 と表示された\n\nhost3$ du -s /export/vol-striping/sample.txt # 5128 と表示された\nhost3$ ls -l /export/vol-striping/sample.txt # サイズが 10484785 と表示された\n</code></pre>\n<p>duの結果（ディスクのセクタ）はちょうど半分ずつに分割されるけど、ファイルの実際のサイズは元ファイルと同じ場合と異なる場合の2パターンが検出できた。これは、\nファイルがスパースファイルなっているため、見かけ上のサイズと実際にディスク上で利用しているサイズが異なっていることが原因。</p>\n<h3>レプリケーション</h3>\n<p>適当なファイルを作ってみる。</p>\n<pre><code>host1$ sudo dd if=/dev/urandom of=/mnt/vol-replica/dummy bs=1M count=10\nhost1$ sha1sum /mnt/vol-replica/dummy # 54b5c383e96d511249f9393de060c3219549e030 だった\n\n# 保管先をチェック\nhost1$ sha1sum /export/vol-replica/dummy # 54b5c383e96d511249f9393de060c3219549e030 だった\n\nhost2$ sha1sum /export/vol-replica/dummy # 54b5c383e96d511249f9393de060c3219549e030 だった\n</code></pre>\n<p>同じ内容のファイルが複数箇所に保存されることがわかった。</p>\n<h2>メモ</h2>\n<p>なんとなくでも使い始められちゃうくらい簡単に使えるけど、[ドキュメント](http://gluster.org/community/documentatio\nn/index.php/Main_Page)の[PDF](http://www.gluster.org/wp-\ncontent/uploads/2012/05/Gluster_File_System-3.3.0-Administration_Guide-en-\nUS.pdf) がわかりやすくコンパクトにまとまっていて、全体像を理解するのはここからここから始めるといいと思う。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://www.gluster.org/community/documentation/index.php/Main_Page\">Gluster Community のドキュメント</a></li>\n</ul>\n"}},"__N_SSG":true}