{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-05-07-create-ominibus-installer.markdown","path":"2013/05/07/create-ominibus-installer","layout":"post","title":"omnibus を使って オムニバスインストーラーを作成する","createdAt":"2013-05-06T16:41:00.000Z","kind":"article","comments":true,"tags":["packaging"],"content":"<p>Chef のインストールは結構面倒くさかったんだけど、<a href=\"http://www.opscode.com/chef/install/\">オムニバスインストーラー</a>が出たことで状況はがらっと変わって、簡単に導入できるようになった。このオムニバスインストーラーの仕組みは汎用的に作られているので、他のツールでも適用できるという話。</p>\n<!-- more -->\n<h2>オムニバスインストーラーについて</h2>\n<p>Chef のオムニバスインストーラーを実行すると以下のようなディレクトリ構成でファイルが置かれる:</p>\n<ul>\n<li>/opt/chef/bin/ ... Chef 関連のスクリプト</li>\n<li>/opt/chef/embedded/ ... ruby インタプリタ、Chef とその他依存パッケージ</li>\n<li>(/usr/bin/ ... /opt/chef/bin/ 以下のものがシンボリックリンクが配置される)</li>\n</ul>\n<p>以上の通り、<code>/opt/chef</code> の中に動作に必要なものがごっそり置かれる。アプリケーションレベルでプログラミングの処理系を持っちゃうというのはこれに限らずよく見る光景で、理由としてはパッケージ提供されていない最新版が使いたかったり、バージョンアップやライブラリインストールの影響範囲を限定させたかったりだと思う。</p>\n<p>ここしばらくは手軽なパッケージ作成ツールとして<a href=\"https://github.com/jordansissel/fpm\">fpm</a>がよく使われているけど、オムニバスインストーラーは<a href=\"https://github.com/opscode/omnibus-ruby\">omnibus</a>という「ビルドツール」＋「fpm ラッパー」といった感じのもので作られている。以下は実際に <a href=\"https://github.com/opscode/omnibus-ruby\">omnibus</a> を使ったインストーラー作成の手順についてまとめる。</p>\n<h2>パッケージ作成</h2>\n<p><a href=\"https://github.com/etsy/statsd\">statsd</a> および <a href=\"https://github.com/etsy/statsd\">statsd</a> を動かすために必要な Node.js を /opt/statsd にインストールする RPM, Deb パッケージの作成を行ってみる。</p>\n<h3>環境</h3>\n<ul>\n<li>Macbook Air Mountain Lion</li>\n<li>Ruby 2.0.0-p0</li>\n<li>Vagrant 1.2.2</li>\n</ul>\n<h3>手順</h3>\n<pre><code># omnibus のインストール\ngem install omnibus\n\n# 必要となる vagrant 用の plugin をインストール\nvagrant plugin install vagrant-omnibus\nvagrant plugin install vagrant-berkshelf\n\n# プロジェクトディレクトリの作成(ディレクトリ名は `omnibus-プロジェクト` となる)\nomnibus project statsd\ncd omnibus-statsd\n\n# プロジェクトディレクトリ内のファイルを適宜修正:\n    Berksfile\n      Berkshelf 用の設定。変更する必要無い。\n    Vagrantfile\n      Vagrant 用の設定。2013-06-07 現在だと CentOS 5, 6 Ubuntu 10.04, 11.04, 12.04 の設定が導入済み。\n    README.md\n    omnibus.rb.example\n      成果物を S3 上にキャッシュする場合などに利用。使わないなら気にしなくていい。\n    config/projects/statsd.rb\n      後述\n    config/software/*\n      後述\n    package-scripts/statsd/*\n      インストール時、アンインストール時などに実行したいスクリプトなど。\n</code></pre>\n<p>この中で、実際のビルドプロセスを定義するのは、config/projects/ 以下と config/software 以下になる。</p>\n<p><code>config/projects/</code> はプロジェクトの設定を格納するディレクトリで、初期状態では statsd 用のプロジェクトファイル <code>config/projects/statsd.rb</code> が作られている。このファイルを修正していくことになる。</p>\n<pre><code>name \"statsd\"\nmaintainer \"f440\"\nhomepage \"https://github.com/f440/omnibus-statsd\"\n\ninstall_path    \"/opt/statsd\"\nbuild_version   \"0.6.0\"\nbuild_iteration 1\n\ndependency \"preparation\"\ndependency \"node\"\ndependency \"statsd\"\n\nexclude \"\\.git*\"\n</code></pre>\n<p>おおむね想像がつく名前だけど、dependency だけはよく分からないと思う。dependency で指定したものはプロジェクトを構成する software という扱いで、<code>config/software/</code> 以下でその設定を行っていく。</p>\n<p>software の例を示す。典型的な例だと、指定した URL からダウンロードしてきたものを一時ディレクトリで展開して、<code>configure &#x26;&#x26; make &#x26;&#x26; make install</code> を実行、などだが今回の作業では Node.js のバイナリを展開して <code>/opt/embedded</code> 以下にコピーしているだけである。</p>\n<pre><code>name \"node\"\nversion \"0.10.5\"\n\nsource :url => \"http://nodejs.org/dist/v0.10.5/node-v0.10.5-linux-x64.tar.gz\",\n       :md5 => \"fb65723d395c559393201dd41e0eb275\"\n\nrelative_path \"node-v0.10.5-linux-x64\"\n\nbuild do\n  command \"rsync -av . #{install_dir}/embedded/\"\nend\n</code></pre>\n<p>必要となる software の設定を全部そろえたらビルドを実行する。マシンの起動、Chef のインストール、omnibus の Cookbook 実行、ビルド環境構築、ビルド実行、パッケージ作成 といったことが行われることになるため、初回はかなり待つことになる。</p>\n<pre><code>vagrant up\n(vagrant up centos-6 など、直接マシンを指定してもいい)\n(もし Linux 上で作業しているのであれば、omnibus build project statsd で直接パッケージ作成を開始出来る)\n</code></pre>\n<p>問題なければ、pkg/ 以下に statsd-0.6.0-1.el6.x86_64.rpm, statsd_0.6.0-1.ubuntu.12.04_amd64.deb といったファイルが出来る。</p>\n<h2>まとめ</h2>\n<p>やっていることは <a href=\"https://github.com/jordansissel/fpm\">fpm</a> でパッケージを作っているだけなんだけど、<a href=\"http://www.vagrantup.com/\">Vagrant</a> x <a href=\"http://berkshelf.com/\">Berkshelf</a> x <a href=\"http://www.opscode.com/chef/\">Chef</a> のコンビネーションのおかげで、パッケージとそのパッケージを作るための環境が簡単に手に入るのはとてもいい。複数環境のパッケージを作る予定がなくっても、最初から<a href=\"https://github.com/opscode/omnibus-ruby\">omnibus</a>上でパッケージを作れるようにしておくと運用が楽そう。</p>\n<h2>備考</h2>\n<p>似たようなツールとして、<a href=\"https://github.com/joemiller/bunchr\">bunchr</a> が存在する。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://github.com/etsy/statsd\">Statsd</a></li>\n<li><a href=\"http://www.opscode.com/chef/install/\">Install Chef</a></li>\n<li><a href=\"https://github.com/opscode/omnibus-ruby\">omnibus</a></li>\n<li><a href=\"https://github.com/joemiller/bunchr\">bunchr</a></li>\n<li><a href=\"https://github.com/jordansissel/fpm\">fpm</a></li>\n<li><a href=\"http://www.vagrantup.com/\">Vagrant</a></li>\n<li><a href=\"http://berkshelf.com/\">Berkshelf</a></li>\n</ul>\n"}},"__N_SSG":true}