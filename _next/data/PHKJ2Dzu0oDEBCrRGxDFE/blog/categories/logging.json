{"pageProps":{"tag":"logging","posts":[{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-03-17-logging-with-splunk-storm.markdown","path":"blog/2013/03/17/logging-with-splunk-storm","layout":"post","title":"イベント管理にSplunk Stormを使ってみる","createdAt":"2013-03-17T12:17:00.000Z","kind":"article","comments":true,"tags":["logging","visualization","splunk"],"content":"\n[Splunk] はおそらくイベント・ログ管理のツールとしてはおそらくもっとも有名で、日本でも販売展開しているので知っている人も多いかと思う。その splunk が [Splunk Storm] というサービスを始めている。試しに使ってみたのでその感想。\n\n<!-- more -->\n\n料金に応じて、格納可能なデータの容量が増える課金体系。無料でも1GBまで利用可能。\n\nデータの取り込みは以下の方法が提供されている:\n\n  - Syslog, Rsyslog, Syslog-ng などから転送\n  - TCP/UDP を使って直接登録\n    - `cat some_file.log | nc endpoind_hostname port` で登録可能\n  - HTTP API\n  - forwarder と呼ばれるクライアントプログラム\n    - ログの読み取りなども可能\n  - ファイルアップロード\n\n試しにアカウントをとってApacheのログ形式のデータをncでがんがん取り込んでみたところ、1GB を超えたところでもうこれ以上追加できないとのメールが届いた。結果、200万件以上のデータが登録できていた。\n\n複雑な検索式を使って特定の条件に合うレコードを弾き出したり、図示することができる。たとえば、ステータスコードでグルーピングしたグラフを表示するには、以下の検索式を指定する。\n\n    sourcetype=\"access_combined\" status=\"*\" | timechart count by status\n\nリアルタイムで計算しているらしく、新しい時間帯から古い時間帯へとどんどんグラフが追加されていく。\n\n![httpstatus](/images/2013-03-17-logging-with-splunk-storm/httpstatus.png)\n\nさすがというか、よくできている。\n\n[Splunk]: http://www.splunk.com/\n[Splunk Storm]: https://www.splunkstorm.com/storm/\n"},{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-03-17-fluentd-and-graphite.markdown","path":"blog/2013/03/17/fluentd-and-graphite","layout":"post","title":"FluentdのデータをGraphiteに出力するときのTips","createdAt":"2013-03-17T06:50:00.000Z","kind":"article","comments":true,"tags":["fluentd","graphite","logging","visualization"],"content":"\n[fluent-plugin-graphite] 利用時のメモ。\n\nOps界隈での可視化というと、ここ何年かは[Graphite]でグラフを作ってそれを他のツールで表示する、みたいなのが多い。[Fluentd]のデータを可視化したい場合は[GrowthForecast]が使われることが多いけど、[Graphite]使ってみるといろんなツールと組み合わせられておもしろい。\n\n<!-- more -->\n\nFluentd から Graphite へデータを送るのは [Fluent-plugin-graphite] を使えば簡単に実現できそうなんだけど、プラグイン側のインターフェース(`:key` や `:count` といったキーが必要)に合わせて入力のデータを整形する必要がある。\n\nこういった調整は、out\\_map を使うことで実現できる。\n\n    <source>\n      type tail\n      format apache\n      path /var/log/httpd/access_log\n      tag apache.access\n    </source>\n    <match apache.access>\n      type map\n      map [[\"graphite.\" + tag, time, {\"key\" => \"graphite.apache.accesslog.code.\" + record[\"code\"], \"count\" => 1}]]\n      multi true\n    </match>\n    <match graphite.**>\n      type graphite\n    </match>\n\n[Fluentd]: http://fluentd.org/\n[Graphite]: http://graphite.wikidot.com/\n[GrowthForecast]: http://kazeburo.github.com/GrowthForecast/\n[fluent-plugin-graphite]: https://github.com/hotchpotch/fluent-plugin-graphite\n"},{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-03-17-fluentd-and-stathat.markdown","path":"blog/2013/03/17/fluentd-and-stathat","layout":"post","title":"Fluentdの出力結果をStatHatで可視化する","createdAt":"2013-03-17T06:48:00.000Z","kind":"article","comments":true,"tags":["fluentd","stathat","logging","visualization"],"content":"\n[Fluentd]で取得した情報を可視化したいとき、[fluent-plugin-growthforecast]を使って[GrowthForecast]にグラフを作る方法がよく知られている。[GrowthForecast]はインストール後すぐに使い始められるお手軽ツールなんだけど、それすら面倒くさい、自前で環境を作るのが面倒、というときには[StatHat]を使うと簡単に可視化を実現できるという話。\n\n<!-- more -->\n\n[StatHat]はシンプルなインターフェースで必要十分な機能があり、しかも無料で使えるというサービス。HTTPでデータを登録するだけできれいなグラフが簡単に生成できるので、幅広い用途で利用できる。\n\n以降、[Fluentd]と[StatHat]を組み合わせて利用するための設定を説明する。\n\n## 作業\n\n### StatHat\n\nStathatの[Sign up](https://www.stathat.com/sign_up)にアクセスしてメールアドレスを登録し、折り返し届くメール内のURLからパスワードを登録すればすぐ使い始められる。グラフを作るための下準備は不要。まずは、curl を使って直接 POST してみる。\n\n    curl -d \"email=登録時のメールアドレス&stat=body temperature&value=36.8\" http://api.stathat.com/ez\n\nすると、メールアドレス宛にグラフの追加が通知され、画面から確認できるようになる。\n\n(メールアドレスに`+`みたいなURLエンコードが必要な文字を含んでる場合は、 --data-urlencode を使って一つずつパラメータを指定すればいい)\n\nAPIを利用するために必要となるキーは、初期状態だと登録時のメールアドレスになっている。これは[設定画面](https://www.stathat.com/settings)から変更可能。タイムゾーンも修正できるので住んでいる地域に変更しておいた方がいい。\n\n### Fluentd\n\nFluentd から StatHat を利用するために[プラギン](https://github.com/f440/fluent-plugin-stathat)作ったので、これを利用する。\n\n    fluent-gem install fluent-plugin-stathat\n\nたとえば、よくある「HTTP ステータスコードのカウント」の場合、以下のような設定をすればいい。\n\n    <source>\n      type tail\n      format apache\n      path /var/log/httpd/access_log\n      tag apache.access\n    </source>\n    <match apache.access>\n      type datacounter\n      unit minute\n      tag stathut.httpstatus\n      count_key code\n      pattern1 2xx ^2\\d\\d$\n      pattern2 3xx ^3\\d\\d$\n      pattern3 4xx ^4\\d\\d$\n      pattern4 5xx ^5\\d\\d$\n    </match>\n    <match stathut.httpstatus>\n      type copy\n      <store>\n        type  stathat\n        stat 2xx\n        ezkey your_email@example.com\n        count apache.access_200_count\n      </store>\n      <store>\n        type  stathat\n        stat 3xx\n        ezkey your_email@example.com\n        count apache.access_3xx_count\n      </store>\n      <store>\n        type  stathat\n        stat 4xx\n        ezkey your_email@example.com\n        count apache.access_4xx_count\n      </store>\n      <store>\n        type  stathat\n        stat 5xx\n        ezkey your_email@example.com\n        count apache.access_5xx_count\n      </store>\n    </match>\n\nこれで、こういったグラフが作れる。\n\n![httpstatus](/images/2013-03-17-fluentd-and-stathat/httpstatus.png)\n![4xx](/images/2013-03-17-fluentd-and-stathat/4xx.png)\n\n## まとめ\n\n[StatHat] 便利。\n\n[StatHat]: http://www.stathat.com/\n[Fluentd]: http://fluentd.org/\n[GrowthForecast]: http://kazeburo.github.com/GrowthForecast/\n[fluent-plugin-growthforecast]: https://github.com/tagomoris/fluent-plugin-growthforecast\n"},{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-01-03-log-visualization-using-logstalgia.markdown","path":"blog/2013/01/03/log-visualization-using-logstalgia","layout":"post","title":"logstalgia を使ってログを可視化","createdAt":"2013-01-03T09:50:00.000Z","kind":"article","comments":true,"tags":["logging","visualization"],"content":"\nWebサーバーのログでピンポンゲームの映像を生成する[logstalgia]。\n\n<!-- more -->\n\nhomebrew がインストール済みなら以下で動かせる。\n\n    gem install apache-loggen\n    brew install logstalgia\n    apache-loggen --rate 10 | logstalgia -\n\n[apache-loggen] はApacheのダミーログを生成してくれるスクリプト。便利。\n\n![logstalgia](/images/2013-01-03-log-visualization-using-logstalgia/logstalgia.png)\n\n## 参考\n\n- [logstalgia]\n- [apache-loggen]\n\n[logstalgia]: https://code.google.com/p/logstalgia/ \"logstalgia\"\n[apache-loggen]: http://mt.orz.at/archives/2012/11/apacherubygems.html \"apache-loggen\"\n"}]},"__N_SSG":true}