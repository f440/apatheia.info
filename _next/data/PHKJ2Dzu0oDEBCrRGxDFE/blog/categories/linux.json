{"pageProps":{"tag":"linux","posts":[{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2013-01-01-network-restriction-using-trickle.markdown","path":"blog/2013/01/01/network-restriction-using-trickle","layout":"post","title":"Trickleを使って帯域制限をする","createdAt":"2013-01-01T08:05:00.000Z","kind":"article","comments":true,"tags":["unix","linux","network"],"content":"\nネットワーク経由で大量のデータをやりとりしたいが、メインのサービスには影響を与えたくないという場合がよくある。`rsync`や`scp` など、大きなファイルの転送を考慮されたコマンドではネットワーク帯域を制限するオプションが用意されていることも多いが、自作のツールなどに帯域制限を実装するとなるとかなり面倒くさいことになる。\n\n<!-- more -->\n\nLinux で帯域制限をしたい場合、tc や cgroup を使う方法がよく知られている。ただ、「あるコマンドにネットワークが占領されないように穏やかに実行したい」というニーズに対しては大げさで、またオプションが難解だったり管理権限が必要だったりといったことから二の足を踏む感じのものだった。もっと普段使いに適したツールがないものかと探していたところ、こういったシーンでは[Tricle][trickle]がかなり有効だと言うことがわかった。\n\n## インストール\n\nDebian, Ubuntu なら公式からパッケージが提供されている。RHEL 系 OS であれば、EPEL にパッケージがあるのでそちらを利用。\n\n## 使い方\n\n### trickle\n\nコマンドの前に `trickle` をつけるだけで、簡単に帯域制限が実現できる。とりあえず、「`-d n`で n KByte/sec にダウンロードが制限」、「`-u n`で n KByte/sec に制限」だけ覚えておけばいい。\n\n    # wget のダウンロード速度を 20 KBpsに制限する例\n    #  (本当は wget も curl も --limit-rate オプションが元々あるので、こんなことしなくても大丈夫)\n    trickle -d 20 wget --verbose http://ftp.jaist.ac.jp/pub/Linux/ArchLinux/iso/2012.12.01/archlinux-2012.12.01-dual.iso\n\n実行時、`trickled` が見つからないというメッセージが出るが、これは`-s`(standaloneモード)をつけることで抑制できる。\n\n### trickled\n\n`trickled` というプログラムも利用できるようになって、`tricle`と同様にオプション`-d`, `-u`が設定可能。`trickled`を一度起動するとデーモンとなり、以降`trickle`を使って起動したコマンドの帯域は、`trickled`起動時のオプションで設定した値までに制限される。複数個のプログラムを `trickle` で起動した場合、使用している帯域の総和が `trickled`の設定値に従うことになる。\n\n## 参考\n\n- [配布元][trickle]\n- [仕組み](http://monkey.org/~marius/trickle/trickle.pdf)\n\n[trickle]: http://monkey.org/~marius/pages/?page=trickle \"trickle公式\"\n"},{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-05-13-vps-lxc-xtradb-cluster.markdown","path":"blog/2012/05/13/vps-lxc-xtradb-cluster","layout":"post","title":"さくらのVPSにLXCで仮想環境構築してXtraDB Cluster動かす","createdAt":"2012-05-12T15:00:00.000Z","kind":"article","comments":true,"tags":["mysql","lxc","linux"],"content":"ほんの数年前までVPSといえばLinode、Slicehostなどの海外のサーバーしか選択肢がなかった。ls を実行しても一呼吸おくほどのレイテンシーがあるような環境で、128MBくらいのメモリを何とかやりくりしてRailsを動かしていたが、現在では月1000円程度で用途によっては手に余るようなスペックが手に入るようになっている。そんなVPSの余ったリソースを使って、仮想環境をたてようというのが今回の目的だ。\n\n<!-- more -->\n\n[LXC](http://lxc.sourceforge.net/)は、他の仮想化方式と比べてオーバーヘッドが少なくきびきび動くし、必要であればCPUやメモリの制限をつけることもできる。RPMやDebのパッケージ作成をしたり、Chefのcookbook作成などで独立した環境を手軽に構築したい人には特に有用に思う。また、簡単にネットワークが作れるので、複数台構成のソフトウェアを1台のマシンのなかで動かすことが出来る。今回は動作確認として [PerconaXtraDB Cluster](http://www.percona.com/software/percona-xtradb-cluster/)を動かしてみることにする。\n\n## 前提について\n\n作業環境は以下を想定している。\n\n  * さくらのVPS(v3) 1G \n    * CentOS 6.2 x86_64\n  * LXC 0.7.5\n\nCentOSを使っているのはデフォルトのOSイメージだからというのが理由。\n\n今回の内容をEC2上で実行する場合、Amazon Linux でもほとんど同様の設定で作業を行えることを確認しているけど、もっ と新しいOS、たとえば Ubuntu 12.04 LTS を使えば後述する cgroupの設定、bridgeの設定が不要となるためより簡単に行える。CentOS 6で実施したときだけ遭遇するような問題に何度もぶつかったので、出来るだけ新しいOSを使った方がいい。\n\n仮想環境としては、lxcに同梱されているテンプレートを利用してUbuntuを、またOSイメージの作成からCentOSを構築する。\n\n## 構築方法\n\n以降の作業はすべて root で行うものとする。\n\n### ネットワークの設定\n\n仮想環境とのやりとりで使うブリッジを作る。\n\n    \n    # yum install bridge-utils\n    # vim /etc/sysconfig/network-scripts/ifcfg-lxcbr0\n    \n        DEVICE=lxcbr0\n        TYPE=Bridge\n        BOOTPROTO=none\n        IPADDR=10.0.3.1\n        NETMASK=255.255.255.0\n        ONBOOT=yes\n    \n    # ifup lxcbr0 # 起動\n    \n\n### cgroup\n\n    \n    # mount | grep cgroup # cgroup がないこと確認\n    # mkdir -p /cgroup\n    # printf \"none\t\t\t/cgroup\t\tcgroup\tdefaults\t\t0 0\n    \" >> /etc/fstab\n    # mount -a\n    # mount | grep cgroup # cgroup があること確認\n    \n\n### lxc セットアップ\n\n    \n    # yum install libcap-devel docbook-utils\n    # yum groupinstall \"Development Tools\"\n    \n    # wget [http://lxc.sourceforge.net/download/lxc/lxc-0.7.5.tar.gz](http://lxc.sourceforge.net/download/lxc/lxc-0.7.5.tar.gz)\n    # tar xf lxc-0.7.5.tar.gz\n    # cd lxc-0.7.5\n    # ./configure\n    # make rpm # この途中で /usr/lib64/lxc/{template,rootfs} がインストールされるのかなり狂ってる\n    # rpm -ivh ~/rpmbuild/RPMS/x86_64/lxc-0.7.5-1.x86_64.rpm\n       (~/rpmbuild になければ、/usr/src/rpm から探す)\n    # mkdir -p /var/lib/lxc\n    \n\n### dnsmasq (DHCP, DNS サーバー) セットアップ\n\n環境を増やすごとに毎回NICの設定を編集するのは手間なので、ホスト側で dncp, dns の設定をする。\n\n    \n    # yum install dnsmasq\n    # vim /etc/dnsmasq.conf\n    \n        コメントを外して有効化する、編集するなどで以下の設定を行う\n        domain は自分の使いたい名前にすればいい\n    \n        domain-needed\n        bogus-priv\n        interface = lxcbr0\n        listen-address = 127.0.0.1\n        listen-address = 10.0.3.1\n        expand-hosts\n        domain = lxc\n        dhcp-range = 10.0.3.50,10.0.3.200,1h\n    \n    # service dnsmasq reload\n    \n\n### ネットワークセットアップ\n\n仮想環境から外部へのやりとりが出来るようにネットワークの設定を変更する。\n\n    \n    # sysctl -w net.ipv4.ip_forward=1\n    # sed -i -re s/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/ /etc/sysctl.conf\n    # iptables -A POSTROUTING -s 10.0.3.0/24 -t nat -j MASQUERADE\n    # service iptables save # 設定を /etc/sysconfig/iptables に保存\n    \n\n### 仮想環境構築 (1) 同梱のスクリプトを使った Ubuntu のインストール\n\nlxcに同梱のスクリプト /usr/lib64/lxc/templates/lxc-ubuntu を使ってUbuntuをインストールする。\n\n基本的な設定ファイルを作る。\n\n    \n    # cd\n    # vim lxc.conf\n    \n        lxc.network.type=veth\n        lxc.network.link=lxcbr0\n        lxc.network.flags=up\n    \n\n今回は Ubuntu を導入するので、そのために必要なプログラムをインストールする。\n\n    \n    # yum install --enablerepo=epel debootstrap dpkg\n    \n\nこれで準備が出来たので、実際に仮想環境を動かしてみる。\n\n    \n    # lxc-create -t ubuntu -f lxc.conf -n vm0\n       -t がテンプレートの名前。 -t ubuntu なら /usr/lib64/lxc/templates/lxc-ubuntu が読み込まれる\n          オプションでバージョンが指定可能だが、lxc 0.7.5 に同梱されているテンプレートのデフォルトだと Ubuntu 10.04 が選ばれる。\n       -f がさっき作った設定ファイルの場所\n       -n が環境の名前。今回は vm0 とした。 /var/lib/lxc/vm0 にファイルがおかれる\n    # lxc-start -n vm0 -l debug -o debug.out -d\n       -l はデバッグレベル、-o はデバッグの場所を指定。安定して起動するようになったらつけなくていい\n    # lxc-console -n vm0\n      一回エンター押した後、ユーザー root パスワード root でログイン\n      抜けるときは Ctrl-a q\n    \n      lxc-console をしても何も表示されない状態になったら、以下を施して再起動\n    \n    # vim /var/lib/lxc/vm0/rootfs/etc/init/lxc.conf\n    \n      telinit を差し込む\n    \n        --- /var/lib/lxc/vm0/rootfs/etc/init/lxcguest.conf.orig 2012-02-07 10:28:25.000000000 +0900\n        +++ /var/lib/lxc/vm0/rootfs/etc/init/lxcguest.conf      2012-05-06 22:43:21.606098530 +0900\n        @@ -12,5 +12,6 @@\n            touch /var/run/utmp\n            chown root:utmp /var/run/utmp\n            initctl emit --no-wait net-device-added INTERFACE=lo || true\n        +   telinit 3\n            exit 0\n         end script\n    \n\nlxc-console だとCtrl-aが使えなくて不便なので、今後はsshでログインしたい。テンプレートが自動的にOpenSSHをインストールしてくれるが、ちゃんと起動しない。仕方が無いので、update-rc.d で起動するように設定\n\n    \n      仮想環境内で実行\n    # update-rc.d ssh enable\n    \n\n固定IPアドレスを振りたい場合は、設定を変更する。\n\n    \n      ホスト側からの変更\n    # vim /var/lib/lxc/vm0/config\n    \n      lxc.network.ipv4 = 10.0.3.2/24\n    \n      仮想環境の中で変更\n    # vim /etc/network/interfaces\n    \n        変更前\n        auto lo\n        iface lo inet loopback\n    \n        auto eth0\n        iface eth0 inet dhcp\n    \n        変更後\n        auto lo\n        iface lo inet loopback\n    \n        iface eth0 inet static\n            address 10.0.3.2\n            netmask 255.255.255.0\n            gateway 10.0.3.1\n    \n\n仮想環境の破棄は lxc-destroy で行う\n\n    \n    # lxc-destroy -n vm0\n    \n\n### 仮想環境構築 (2) 独自に構築した CentOS 6 のインストール\n\nlxc-console の標準テンプレートでは CentOS が用意されていないので、自力でセットアップする。\n\n#### イメージ作成\n\n基本的に [Centos6/Installation/Minimal installation using yum](http://wiki.1tux.org/wiki/Centos6/Installation/Minimal_installation_using_yum) の通り。ただし 64 bit 版をインストールする\n\n    \n    # mkdir /t\n    # cd /t\n    # wget [http://mirrors.kernel.org/centos/6/os/x86_64/Packages/centos-release-6-2.el6.centos.7.x86_64.rpm](http://mirrors.kernel.org/centos/6/os/x86_64/Packages/centos-release-6-2.el6.centos.7.x86_64.rpm)\n    # rpm2cpio centos-release-6-2.el6.centos.7.x86_64.rpm  | cpio -idm\n    # sed -i s/$releasever/6/g ./etc/yum.repos.d/*\n    # yum --installroot=/t groupinstall base\n    # yum --installroot=/t install dhclient\n    # rm centos-release*.rpm\n    # chroot /t\n    \n      // ここから後はchroot内\n    \n    # passwd # パスワード変更\n    \n    # rm -f /dev/null\n    # mknod -m 666 /dev/null c 1 3\n    # mknod -m 666 /dev/zero c 1 5\n    # mknod -m 666 /dev/urandom c 1 9\n    # ln -s /dev/urandom /dev/random\n    # mknod -m 600 /dev/console c 5 1\n    # mknod -m 660 /dev/tty1 c 4 1\n    # chown root:tty /dev/tty1\n    \n    # mkdir -p /dev/shm\n    # chmod 1777 /dev/shm\n    # mkdir -p /dev/pts\n    # chmod 755 /dev/pts\n    \n    # cp -a /etc/skel/. /root/.\n    \n    # cat > /etc/resolv.conf << END\n    # Google public DNS\n    nameserver 8.8.8.8\n    nameserver 8.8.4.4\n    END\n    \n    # cat > /etc/hosts << END\n    127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n    ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n    END\n    \n    # cat > /etc/sysconfig/network << END\n    NETWORKING=yes\n    HOSTNAME=localhost\n    END\n    \n    # cat > /etc/sysconfig/network-scripts/ifcfg-eth0  << END\n    DEVICE=eth0\n    ONBOOT=yes\n    BOOTPROTO=dhcp\n    END\n    \n    # cat > /etc/fstab << END\n    /dev/root               /                       rootfs   defaults        0 0\n    none                    /dev/shm                tmpfs    nosuid,nodev    0 0\n    END\n    \n    # cat > /etc/init/lxc-sysinit.conf << END\n    start on startup\n    env container\n    \n    pre-start script\n            if [ \"x$container\" != \"xlxc\" -a \"x$container\" != \"xlibvirt\" ]; then\n                    stop;\n            fi\n            telinit 3\n            initctl start tty TTY=console\n            exit 0;\n    end script\n    END\n    \n    # exit\n    \n    // ここから後はchroot外\n    \n    # cd /t\n    # tar cvfz /centos6-lxc-root.tgz .\n    \n\n#### 設定\n\n    \n    # mkdir /var/lib/lxc/vm0\n    # cd /var/lib/lxc/vm0\n    # mkdir rootfs\n    # cd rootfs\n    # tar xfz /centos6-lxc-root.tgz --numeric-owner\n    # cd /var/lib/lxc/vm0\n    \n    # cat >/var/lib/lxc/vm0/config << END\n    lxc.network.type=veth\n    lxc.network.link=lxcbr0\n    lxc.network.flags=up\n    lxc.network.veth.pair=veth-vm0\n    lxc.utsname = vm0\n    \n    lxc.tty = 1\n    lxc.pts = 1024\n    lxc.rootfs = /var/lib/lxc/vm0/rootfs\n    lxc.mount  = /var/lib/lxc/vm0/fstab\n    lxc.arch = x86_64\n    lxc.cap.drop = sys_module mac_admin\n    \n    lxc.cgroup.devices.deny = a\n    # Allow any mknod (but not using the node)\n    lxc.cgroup.devices.allow = c *:* m\n    lxc.cgroup.devices.allow = b *:* m\n    # /dev/null and zero\n    lxc.cgroup.devices.allow = c 1:3 rwm\n    lxc.cgroup.devices.allow = c 1:5 rwm\n    # consoles\n    lxc.cgroup.devices.allow = c 5:1 rwm\n    lxc.cgroup.devices.allow = c 5:0 rwm\n    # /dev/{,u}random\n    lxc.cgroup.devices.allow = c 1:9 rwm\n    lxc.cgroup.devices.allow = c 1:8 rwm\n    lxc.cgroup.devices.allow = c 136:* rwm\n    lxc.cgroup.devices.allow = c 5:2 rwm\n    # rtc\n    lxc.cgroup.devices.allow = c 254:0 rwm\n    #fuse\n    lxc.cgroup.devices.allow = c 10:229 rwm\n    #tun\n    lxc.cgroup.devices.allow = c 10:200 rwm\n    #full\n    lxc.cgroup.devices.allow = c 1:7 rwm\n    #hpet\n    lxc.cgroup.devices.allow = c 10:228 rwm\n    #kvm\n    lxc.cgroup.devices.allow = c 10:232 rwm\n    END\n    \n    # cat > fstab  << END\n    proc            /var/lib/lxc/vm0/rootfs/proc         proc    nodev,noexec,nosuid 0 0\n    sysfs           /var/lib/lxc/vm0/rootfs/sys          sysfs defaults  0 0\n    END\n    \n\n#### 起動\n\n    \n    # lxc-start -n vm0 -l debug -o debug.out -d\n    # lxc-console -n vm0\n    \n    OpenSSH がなければ入れておく\n    # yum install openssh-server\n    # service sshd start\n    \n\n## 動作確認 (Percona XtraDB Cluster の稼働確認)\n\n動作確認として Percona XtraDB Cluster を動かしてみる。\n\nすでにこれまでの作業を通して vm0 としてCentOS 6がインストール済みとする。\n\n### ホスト側設定\n\n  * 構成 \n    * ホスト, IPアドレス 10.0.3.1\n    * 仮想0 vm0, IPアドレス 10.0.3.2\n    * 仮想1 vm1, IPアドレス 10.0.3.3\n    * 仮想2 vm2, IPアドレス 10.0.3.4\n\n各仮想環境に簡単にアクセスできるように hosts を設定しておく。ホスト側に設定しておけば、dnsmasq のおかげで仮想側でも名前が引けるようになる。\n\n    \n    # vim /etc/hosts\n        以下を追記\n        10.0.3.2 vm0\n        10.0.3.3 vm1\n        10.0.3.4 vm2\n    \n\n### コピー元(vm0) 設定\n\n    \n    # ssh vm0\n      ここからはvm0の中\n    \n      固定IPアドレスを設定\n    # vim /var/lib/lxc/vm1/rootfs/etc/sysconfig/network-scripts/ifcfg-eth0\n        DEVICE=eth0\n        ONBOOT=yes\n        BOOTPROTO=static\n        IPADDR=10.0.3.3\n        NETMASK=255.255.255.0\n        GATEWAY=10.0.3.1\n    \n      XtraDB Cluster インストール\n    # rpm -Uhv [http://repo.percona.com/testing/centos/6/os/noarch/percona-testing-0.0-1.noarch.rpm](http://repo.percona.com/testing/centos/6/os/noarch/percona-testing-0.0-1.noarch.rpm)\n    # rpm -Uhv [http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm](http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm)\n    # yum install Percona-XtraDB-Cluster-server Percona-XtraDB-Cluster-client\n    # cat > /etc/my.cnf <<END\n    [mysqld]\n    binlog_format=ROW\n    wsrep_provider=/usr/lib64/libgalera_smm.so\n    wsrep_cluster_address=gcomm://\n    wsrep_slave_threads=2\n    wsrep_cluster_name=lxccluster\n    wsrep_sst_method=rsync\n    wsrep_node_name=node0\n    innodb_locks_unsafe_for_binlog=1\n    innodb_autoinc_lock_mode=2\n    END\n    \n    # poweroff\n    \n\n### コピー、起動\n\n    \n    # lxc-clone -n vm1 -o vm0\n      -n はこれから作る仮想環境の名前\n      -o はコピー元の仮想環境の名前\n    # lxc-clone -n vm1 -o vm0\n    # vim /var/lib/lxc/vm1/config\n      vm0をvm1に置換 (vm2ではvm2に置換)\n      IPアドレスを10.0.3.2 -> 10.0.3.3 に変更 (vm2では 10.0.3.4に変更)\n    # vim /var/lib/lxc/vm1/rootfs/etc/my.cnf\n        wsrep_cluster_address=gcomm:// をwsrep_cluster_address=gcomm://10.0.3.2 に変更\n        wsrep_node_name=node0 を wsrep_node_name=node1 に変更 (vm2ではnode2に変更)\n    \n      同様にvm0からvm2のコピーを実施\n    \n\n3つの環境が完成したら起動\n\n    \n    # lxc-start -n vm0 -l debug -o debug.0.out -d\n    # lxc-start -n vm1 -l debug -o debug.1.out -d\n    # lxc-start -n vm2 -l debug -o debug.2.out -d\n    \n\n### 動作確認\n\nvm0 にログインして実行\n\n    \n    # mysql -u root\n      データベース、テーブル作成\n    mysql> create database t;\n    mysql> use t;\n    mysql> create table sample (\n    id int not null primary key auto_increment,\n    value int\n    );\n    \n    データ投入\n    mysql> insert into sample set value = 1;\n    mysql> insert into sample set value = 1;\n    mysql> insert into sample set value = 1;\n    mysql> select * from sample;\n    +----+-------+\n    | id | value |\n    +----+-------+\n    |  2 |     1 |\n    |  5 |     1 |\n    |  8 |     1 |\n    +----+-------+\n    \n\nIDがスキップしながらインサートされることがわかる。引き続き、他の環境でもデータを入れてみる。\n\nvm1 にログインして実行\n\n    \n    mysql> use t;\n    mysql> select * from sample;\n    +----+-------+\n    | id | value |\n    +----+-------+\n    |  2 |     1 |\n    |  5 |     1 |\n    |  8 |     1 |\n    +----+-------+\n    mysql> insert into sample set value =  1;\n    mysql> insert into sample set value =  1;\n    mysql> insert into sample set value =  1;\n    mysql> select * from sample;\n    +----+-------+\n    | id | value |\n    +----+-------+\n    |  2 |     1 |\n    |  5 |     1 |\n    |  8 |     1 |\n    |  9 |     1 |\n    | 12 |     1 |\n    | 15 |     1 |\n    +----+-------+\n    \n\n同様のことがvm2でも起きる。\n\nこれにより、XtraDB Cluster の以下の動作が確認出来た。\n\n  * すべてのサーバーで書き込みと参照がおこなえること\n  * オートインクリメントがバッティングしないように、値が自動的にオフセットをつけて挿入されること\n\n## メモ\n\n### 外部から仮想環境へ直接アクセスしたい場合\n\nたとえば、外部からポート10080でアクセスされたとき、仮想環境の 10.0.3.51 のポート 80 へ転送させたい場合は iptables\nで以下のような設定をする。\n\n    \n    # vim /etc/syscofig/iptables\n        -A POSTROUTING -s 10.0.3.0/24 -j MASQUERADE の下に以下を追加\n        -A PREROUTING -i eth0 -p tcp --dport 10080 -j DNAT --to-destination 10.0.3.51:80\n    # service iptables condrestart\n    # iptables -L -t nat # NATテーブルから設定追加を確認\n    \n\n### 新しい Ubuntu を入れたい場合\n\n元の手順だとlucid (10.04) がインストールされるが、たとえば oneiric (11.10) であれば以下でインストール可能。\n\n    \n    # cp -a /usr/share/debootstrap/scripts/lucid  /usr/share/debootstrap/scripts/oneiric\n        lucid は /usr/share/debootstrap/scripts/gutsy のシンボリックリンクで、他のリリースも同様。とにかくファ イル名が参照できるようにシンボリックリンクをコピーしておけばいい。\n    # lxc-create -t ubuntu -f lxc.conf -n vm0 -- --trim -r oneiric\n        lxc-create ではなく -r はテンプレートへの引数\n    \n\n### 他の OS もインストールしてみたい場合\n\n/usr/lib64/lxc/templates/ には lxc-busybox,lxc-debian,lxc-fedora,lxc-lenny,lxc-\nopensuse,lxc-sshd,lxc-ubuntu の テンプレートがある。これ以外の環境が必要であれば、「lxc guset\nOS名」とかで検索してみる。\n\n## 参考\n\n  * [http://www.activestate.com/blog/2011/10/virtualization-ec2-cloud-using-lxc](http://www.activestate.com/blog/2011/10/virtualization-ec2-cloud-using-lxc)\n  * [http://wiki.debian.org/LXC](http://wiki.debian.org/LXC)\n  * [https://help.ubuntu.com/12.04/serverguide/lxc.html](https://help.ubuntu.com/12.04/serverguide/lxc.html)\n  * [http://www.lacerta.be/d7/content/lxc-installation-ubuntu-server-1104](http://www.lacerta.be/d7/content/lxc-installation-ubuntu-server-1104)\n  * [http://wiki.1tux.org/wiki/Lxc/Installation/Guest/Centos/6](http://wiki.1tux.org/wiki/Lxc/Installation/Guest/Centos/6)\n  * [http://www.percona.com/doc/percona-xtradb-cluster/index.html](http://www.percona.com/doc/percona-xtradb-cluster/index.html)\n\n"}]},"__N_SSG":true}