{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-01-03-rundeck-jenkins-java.markdown","path":"2012/01/03/rundeck-jenkins-java","layout":"post","title":"rundeckをセットアップして、jenkins上のjava成果物をデプロイする","createdAt":"2012-01-02T15:00:00.000Z","kind":"article","comments":true,"tags":null,"content":"<p>rundeck でjenkins上の成果物をデプロイしよう、という話。</p>\n<!-- more -->\n<h2>rundeck について</h2>\n<p><a href=\"http://rundeck.org/\">公式サイト</a></p>\n<p>ITオペレーションのコンサルやってる<a href=\"http://www.dtosolutions.com/\">DTO Solution</a>（Depops関連の資料とかでよく会社名は見かけますね）が作っているデプロイ用のツール。元々は<a href=\"http://doc36.controltier.org/wiki/Main_Page\">ControlTier</a>っていう管理ツールがあって、そこから分家した。ControlTierはサーバー/クライアントモデルだけど、サーバー側しか用意しなくていいRundeckのほうがお手軽度高い。</p>\n<p>複数のサーバーを対象に状態を変更するのが目的で、<a href=\"https://github.com/capistrano/capistrano\">capistrano</a>とか<a href=\"http://docs.fabfile.org\">fabric</a>とかと同じジャンル。GUIで操作するのが特徴なので、<a href=\"https://github.com/peritor/webistrano\">webistrano</a>\nとかに近い。</p>\n<p>GUI（笑）みたいに思うかもしれないけど、画面上から履歴が確認できたり、ブラウザがあればどこからでもデプロイ出来るのって、運用の敷居下げるのに貢献してくれると思う。</p>\n<h2>rundeck 設定</h2>\n<h3>インストール</h3>\n<p>とりあえずインストールしてみる。以降の説明は、rundeck インストールサーバー、デプロイ対象サーバーともに CentOS 5 の場合。</p>\n<p><a href=\"http://rundeck.org/docs/RunDeck-Guide.html#installing-rundeck\">http://rundeck.org/docs/RunDeck-Guide.html#installing-rundeck</a> , <a href=\"http://kb.dtosolutions.com/wiki/Rundeck_on_CentOS\">http://kb.dtosolutions.com/wiki/Rundeck_on_CentOS</a> 参照。CentOSならyumで簡単にインストールできる。</p>\n<pre><code>$ sudo rpm -Uvh [http://repo.rundeck.org/latest.rpm](http://repo.rundeck.org/latest.rpm)\n$ sudo yum install rundeck\n</code></pre>\n<p>まずはインストールされたファイルを確認してみよう。</p>\n<pre><code>$ rpm -ql rundeck\n$ rpm -ql rundeck-config\n</code></pre>\n<p>以下のようなことがわかる。</p>\n<ul>\n<li>設定系のファイル /etc/rundeck は本体と別の RPM (rundeck-config) に入っている</li>\n<li>/var/lib/rundeck 以下にシステム関係のデータがおかれて、/var/rundeck 以下にユーザーが作成したデータをおくっぽい\n<ul>\n<li>僕は試してないけど、保存先はDBも使えるみたい。http://rundeck.org/docs/RunDeck-Guide.html#relational-database</li>\n</ul>\n</li>\n</ul>\n<h3>起動</h3>\n<p>さっそく起動してみる。</p>\n<pre><code>$ sudo /sbin/service rundeckd start\n</code></pre>\n<p>既定のポートは 4440 なので http://RUNDECK_HOST:4440/ にアクセスしてみる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx82ozkABF1qz5yk8.png\" alt=\"ログイン画面\"></p>\n<p>アクセスできなければ、ちゃんと起動出来てるかどうかとか、iptables が邪魔していないかとか確認。この時点ではまだログイン出来ない。</p>\n<p>ログインできるようにするために、ユーザーを作る。[公式サイトの説明](http://rundeck.org/docs/RunDeck-Guide.html\n#managing-logins)</p>\n<p>パスワードのハッシュ化はmd5sumコマンドとかでもいいけど、手順に沿って付属のライブラリ使ってみる。RPMでインストールすると、説明文中の$RUNDECK_BASE相当がないので、読み替えて以下のように実行</p>\n<pre><code>$ cd /var/lib/rundeck/\n$ java -cp exp/webapp/WEB-INF/lib/jetty-6.1.21.jar:exp/webapp/WEB-INF/lib/jetty-util-6.1.21.jar org.mortbay.jetty.security.Password f440 secret_password\nOBF:1vny1vn61unn1z7e1vu91ytc1r3x1xfj1r411yta1vv11z7o1uob1vnw1vn4\nMD5:be6cb1069f01cd207e6484538367bd1d\nCRYPT:f4Ou7EnVsEzMg\n</code></pre>\n<p>ユーザー一覧に追加</p>\n<pre><code>$ sudo vim /etc/rundeck/realm.properties\n// 末尾に以下を追加\nf440: MD5:be6cb1069f01cd207e6484538367bd1d,admin,user\n</code></pre>\n<p>これで利用可能になった。ユーザー情報を読み込むために、サービス再起動 （今後もユーザー設定の変更ごとに再起動させる）</p>\n<pre><code>$ sudo /sbin/service rundeckd restart\n</code></pre>\n<p>アクセス出来るようになったはず。ログインしてみる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx838slUR51qz5yk8.png\" alt=\"ログイン直後\"></p>\n<p>やりましたね。</p>\n<p>プロジェクトの名前はお好きに。SSHのキーについては、RPMインストール時に作られるrundeckユーザーのキーが<code>/home/rundeck/.ssh/rundeck.id_rsa</code>なので、ここにしておくと手間が少なくて済む。他の値については、今回はデフォルトで。</p>\n<p>この後説明するホストやジョブはプロジェクト単位で管理していくことになる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx840qzSI71qz5yk8.png\" alt=\"Run\"></p>\n<p>左上のメニューに注目</p>\n<ul>\n<li>Run … 一回こっきりのコマンド。非定型な処理（緊急でアプリケーションサーバー順々に再起動かけたいとか）はここから実行できる。capistrano の <code>cap shell</code> みたいなイメージ</li>\n<li>Job … 複数のコマンドや条件を保存はここに登録。</li>\n<li>Histoly … 実行履歴が確認出来る。</li>\n</ul>\n<p>最初は localhost だけがホストに登録されているから、Run を選択後、真ん中の入力フォームからコマンドを実行してみる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx84c0tw7g1qz5yk8.png\" alt=\"exec_uname\"></p>\n<p>実行できた。</p>\n<h3>ホスト追加</h3>\n<p>ローカルホストにばかりいじっていても不毛なので、ホストを追加していく。ユーザー同様ホストについても設定ファイルを編集する必要がある。</p>\n<p>rundeck をインストールしたサーバーで公開鍵をメモ</p>\n<pre><code>rundeck$ sudo su - rundeck\nrundeck$ cat .ssh/rundeck.id_rsa.pub # 出力結果をメモ\n</code></pre>\n<p>各ホストに作業用ユーザー「deploy」を追加する - パスワード不要でsudo可能。 - パスワードは設定しない - SSH\nの鍵認証でパスフレーズ無しにログイン可能</p>\n<pre><code>以下、デプロイ対象サーバー(仮に192.168.10.10とする)\n192.168.10.10$ sudo /sbin/useradd deploy\n192.168.10.10$ sudo /usr/sbin/visudo\n\n  // tty が使えないとSSH経由のコマンドに問題が起きるので、無効化する\n  Defaults:deploy    !requiretty\n  deploy  ALL=(ALL)       NOPASSWD: ALL\n\n192.168.10.10$ mkdir -m 700 /home/deploy/.ssh\n192.168.10.10$ sudo vim /home/deploy/.ssh/authorized_keys # rundeck の公開鍵を登録\n192.168.10.10$ sudo chown -R deploy.deploy /home/deploy/.ssh\n</code></pre>\n<p>いったん rundeck 側からログインしてみる。</p>\n<pre><code> ここからはまた rundeck をインストールしたサーバーの話\n$ sudo su - rundeck\n$ touch .ssh/config\n$ chmod 600 .ssh/config\n$ vim .ssh/config\n    このあともがしがしサーバー追加していくので、LAN内のマシンについては指紋チェック無効化しておく\n    Host 192.168.*.*\n        StrictHostKeyChecking no\n$ ssh -i ~/.ssh/rundeck.id_rsa deploy@192.168.10.10\n</code></pre>\n<p>次に設定ファイル編集</p>\n<pre><code>$ sudo vim /var/rundeck/projects/example/etc/resources.xml\n\n以下のような行を追加。name, hostname, username 辺りは重要だけど、それ以外は適当に指定。絞り込みの時に使えるので、tags あたりはしっかり入力しておいたほうがいい。\n&#x3C;node name=\"target1\" description=\"適当\" tags=\"適当\" hostname=\"192.168.10.10\" osArch=\"適当\" osFamily=\"適当\" osName=\"適当\" osVersion=\"適当\" username=\"deploy\" />\n</code></pre>\n<p>これで再起動させればrundeck側からホストが操作できるようになっているはず。target1(192.168.115.60), target2(192.168.115.61)を追加して画面から確認してみる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx96zd197m1qz5yk8.png\" alt=\"フィルタ変更\"></p>\n<p>フィルタの変更でとりあえず全部外して、全台表示にする。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx96zqf2uJ1qz5yk8.png\" alt=\"フィルタ変更後\"></p>\n<p>確認できた。ここでコマンドを打てば全台に適用される。</p>\n<h3>ジョブ追加</h3>\n<p>サーバーがセットアップ出来たので、ジョブを追加していく。メニューから<code>Jobs</code>を選択して、<code>New job</code>をクリックすればいい。全部画面に書いてあるけど、一応説明すると:</p>\n<ul>\n<li>Saved this job? ジョブを保存するかどうか\n<ul>\n<li>Job Name … 名前</li>\n<li>Group … グループ。スラッシュ区切りで入力しておくと、階層構造で表示してくれる</li>\n<li>Description … 説明</li>\n<li>UUID … UUID （これとは別に、ジョブを作ると勝手にID割り振られる）</li>\n</ul>\n</li>\n<li>Project どのプロジェクトを対象とするか</li>\n<li>Workflow\n<ul>\n<li>Keepgoing エラーで止まるかそのまま進むか</li>\n<li>Strategy ノードが3台、ステップが2個あったとして、node1-step1, node1-step2, node1-step3, node2-step1 … とすすむのがNode-oriented、Node-oriented、node1-step1, node2-step1, node3-step1 と進んでいくのが Step-oriented</li>\n</ul>\n</li>\n<li>Step 実行するステップを指定。各行の右端にマウスをあわせると（入れ替えたり編集、削除したりできる）\n<ul>\n<li>Command … コマンドの実行（Runでやったのと同じ）</li>\n<li>Script … 複数行のスクリプトの実行</li>\n<li>Script file … サーバー上にあるスクリプトファイルの実行</li>\n<li>Job Reference … 他のジョブを実行</li>\n</ul>\n</li>\n<li>Dispatch to Nodes … これを選択しないと、ローカルホストだけで実行される。選択すると実行対象の絞り込み画面が表示されるので、タグやホスト名、その他条件を設定する。</li>\n<li>Log level … ログの出力多寡を決定</li>\n</ul>\n<p>サクサク作れるので、必要に応じてがしがし増やしていく。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx99jg4sze1qz5yk8.png\" alt=\"\"></p>\n<h2>jenkins との連動</h2>\n<p>rundeck は<a href=\"http://jenkins-ci.org/\">jenkins</a>および[rundeckプラグイン](https://wiki\n.jenkins-ci.org/display/JENKINS/RunDeck+Plugin)と連動して利用することが出来る。</p>\n<p>プラグインはjenkinsのプラグイン管理画面に表示されるので、それを選択するだけでいい。</p>\n<h3>jenkins から rundeck をキックする</h3>\n<p>jenkinsでビルド完了→rundeckでデプロイ→jenkinsで統合テスト実施、といった0-clickのデプロイパイプが作れるようになる。<a href=\"http://www.otsune.com/diary/2008/09/11/1.html#200809111\">0-clickは革命</a> 。</p>\n<p>jenkinsの設定方法は<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/RunDeck+Plugin#RunDeckPlugin-DeploymentPipeline\">プラグインの説明ページ</a>参照。</p>\n<h3>rundeck からjenkins上の成果物を選択できるようにする。</h3>\n<p>rundeckで手動デプロイするとき、成果物名やビルドの名前を選択できるようにする。</p>\n<p>jenkins rundeck プラグインは以下を利用出来るようにしてくれる:</p>\n<ul>\n<li>特定の成果物を起点に、ビルド履歴とその際の成果物を提供するAPI</li>\n<li>特定のビルドを起点に、その最新成果物一覧を提供するAPI</li>\n</ul>\n<p>rundeck でジョブを実行するとき、ユーザー入力を受け付けることが出来るんだけど、この選択項目には外部から取得したJSONなども設定できる。この機能と先ほどのAPIを組み合わせることで実現出来る。</p>\n<p>やってみよう。ジョブの保存画面でオプションを選択。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx9bfrJrHn1qz5yk8.png\" alt=\"オプション設定画面\"></p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx9c296d8I1qz5yk8.png\" alt=\"オプション設定画面2\"></p>\n<ul>\n<li>Option Name … 変数名として使われる値。artifact を指定</li>\n<li>Description … 適当</li>\n<li>Default Value … 未設定でいい</li>\n<li>Allowed Value … Remote URL からAPIのURLを指定（URLの形式は<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/RunDeck+Plugin#RunDeckPlugin-OptionProvider\">ドキュメント参照</a>）</li>\n<li>Restrictions … 値の形式チェック。Remote URLの値しか指定させたくないので、「Enforced from Allowed Values」を指定</li>\n<li>Requirement … 必須かどうか。必須なので、当然「yes」</li>\n<li>Multi-valued … 複数の値をとれるようにするか。複数の成果物を同時にデプロイしたい、とかであれば使えるかもしれないけど、今回は「No」</li>\n<li>Usage … ここで指定した値をステップの部分でどのように使えばいいのか説明してくれている。</li>\n</ul>\n<p>併せて、受け取った値を表示するだけのステップを作ってみる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx9cj2ACEP1qz5yk8.png\" alt=\"ステップ\"></p>\n<p>実行してみよう。最初にビルド番号を聞かれる。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx9cobBFg31qz5yk8.png\" alt=\"成果物一覧\"></p>\n<p>適当に選んで「Run Job Now」すると、さっき作った変数を表示するだけのスクリプトが動いて、指定した成果物のURLが表示され、連携がうまくいっていたことが確認出来る。</p>\n<p><img src=\"/images/2012-01-03-rundeckjenkinsjava/tumblr_lx9dlhjwmr1qz5yk8.png\" alt=\"実行結果\"></p>\n<p>詳細なデプロイ手順については、各環境ごとにあるだろうからアレンジしてもらえればと思う。</p>\n<h2>まとめ</h2>\n<p>ホストやユーザーの設定をいちいちファイル編集しなくちゃいけなかったりするのが、ちょっとかっこわるいかな。ただ、UIはわかりやすいし、セットアップも簡単なので\n、気軽に試してみるといいと思う。</p>\n"}},"__N_SSG":true}