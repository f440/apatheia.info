{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-07-30-roundsman-capistrano-chef-solo.markdown","path":"2012/07/30/roundsman-capistrano-chef-solo","layout":"post","title":"roundsmanを使ってcapistranoからchef-soloを実行する","createdAt":"2012-07-29T15:00:00.000Z","kind":"article","comments":true,"tags":null,"content":"<p>管理対象のサーバー台数が少ない場合など、<a href=\"http://www.opscode.com/chef/\">chef</a>のサーバーを運用するコストとベネフィットを天秤にかけてみて、ああこれどう考えても労力ペイできないな、でも設定ファイルを手動で管理するのはやだな、といったときに[roundsman](https://g\nithub.com/iain/roundsman)を使うといいという話。</p>\n<!-- more -->\n<p><a href=\"https://github.com/iain/roundsman\">roundsman</a>は、chefのレシピを転送して<a href=\"http://wiki.opscode.com/display/chef/Chef+Solo\">chef-solo</a>を実行する<a href=\"https://github.com/capistrano/capistrano\">capistrano</a>向けライブラリ。アプリケーションのリリースタイミングに併せてインフラ設定の変更が必要になることは往々にしてあるので、<a href=\"https://github.com/capistrano/capistrano\">capistrano</a>を使ってデプロイとインフラ設定変更を一括適\n用できるのは便利だ。</p>\n<p>ここでは、Railsアプリを対象に<a href=\"https://github.com/iain/roundsman\">roundsman</a>適用までの作業を簡単にまとめる。</p>\n<h2>手順</h2>\n<p>まずは適当なRailsプロジェクトを作るところから。</p>\n<pre><code>PROJECT=\"my_fantastic_project\"\nrails new $PROJECT\ncd $PROJECT\n\n$EDITOR Gemfile\n  # 追加\n  gem roundsman, :require => false\n  gem capistrano, :require => false\n\nbundle install --path vendor/bundle\n\n# capistranoのCapfile、config/deploy.rbを生成\nbundle exec capify .\n</code></pre>\n<p>chefのcookbooksは<code>config/cookbooks</code>に配置する。場所は設定で変更可能。このディレクトリだけ別リポジトリにしておくと、ほかのプロジェクトでも転用できて便利なのでそうしてる。</p>\n<p>config/deploy.rbを調整する。サーバーの種別ごとにデプロイを切り替えたいので、マルチステージを有効化。</p>\n<pre><code>$EDITOR config/deploy.rb\n\n# 追加\n# require roundsman/capistrano\n# require capistrano/ext/multistage\n</code></pre>\n<p>サーバーグループの設定を<code>config/deploy/*.rb</code>に配置。これについては、[capistrano/ext/multistage](https:\n//github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension)の説明を参照。</p>\n<p>あとは<code>config/deploy.rb</code>でrecipeを実行するタスクを追加し、<code>config/deploy/*.rb</code>の中でattributeを設定していく。</p>\n<pre><code>config/deploy.rb:\n\n    namespace :chef do\n      set :care_about_ruby_version, false\n\n      # 一括して適用\n      task :default do\n        roundsman.run_list fetch(:run_list)\n      end\n\n      # 個別にレシピ適用 (ex. nginx)\n        namespace :nginx do\n          task :install do\n            roundsman.run_list \"recipe[nginx]\"\n          end\n        end\n\n      end\n</code></pre>\n<p><a href=\"https://github.com/iain/roundsman#configuration\">githubにある設定方法の説明</a>だと、config/ステージ名.rb に設定を書いている。</p>\n<pre><code>config/deploy/*.rb:\n\n    set :nginx, :user => \"nginx\", \"worker_process\" => 1, …\n    set :run_recipe, :user => \"nginx\", \"worker_process\" => 1, …\n</code></pre>\n<p>ただ、これだとattributesの管理がcapistranoの中にべったり書くことになってしまい、chef-soloを手で実行したいときとか面倒くさい。そのため、attributesの値はknifeやchef-\nsoloで読めるようなjsonを作って、config/roles 以下で管理している。</p>\n<p>roles ディレクトリはアプリのアップデートと関係なく更新していくことになるので、別リポジトリで管理した方がいい。</p>\n<pre><code>ファイル構成(抜粋)\n\n  ├── Capify\n  ├── Gemfile\n  └── config\n        ├── cookbooks\n        ├── deploy\n        └── roles\n\nconfig/deploy.rb:\n\n  # jsonファイルを取り込む関数を追加\n  require active_support/core_ext/hash/deep_merge\n  def load_role(*roles)\n    json = {}\n    roles.each do |role|\n      json_path = \"#{File.dirname(__FILE__)}/roles/#{role}.json\"\n      json.deep_merge! JSON.load(File.new(json_path))\n    end\n    json.each {|k,v| set (k.to_sym), v }\n end\n\nconfig/deploy/*.rb:\n\n  # 読み込みたいjsonファイルを指定\n  load_role \"web\"\n\nconfig/roles/*.json:\n\n 例: config/roles/web.json\n  {\n     \"nginx\" : {\n      \"user\" : \"nginx\",\n      \"worker_processes\" : 1,\n    …\n     \"run_list\" : [ \"recipe[nginx]\", ... ]\n  }\n</code></pre>\n<p>以上で準備が整った。これで実行できるようになる。</p>\n<pre><code># 一括適用\nbundle exec cap ステージ名 chef\n\n# cookbook を指定して適用\nbundle exec cap ステージ名 chef:nginx\n</code></pre>\n"}},"__N_SSG":true}