{"pageProps":{"post":{"localPath":"/home/f440/go/src/github.com/f440/f440.github.com/content/2012-10-07-sub-for-subcommands.markdown","path":"2012/10/07/sub-for-subcommands","layout":"post","title":"サブコマンドを sub で処理する","createdAt":"2012-10-07T13:13:00.000Z","kind":"article","comments":true,"tags":["cli","shell","unix"],"content":"<p><a href=\"https://github.com/37signals/sub\">sub</a> は <a href=\"http://37signals.com/\">37signals</a> が公開しているスクリプト群。サブコマンド付きのコマンドを作りたいとき、補完やヘルプメッセージなどの便利な機能を提供してくれる。</p>\n<!-- more -->\n<h2>使い方</h2>\n<p>以下の簡単なコマンドを作って、動作を確認してみることにする。</p>\n<pre><code>ex. browse safari http://google.com/\n\nコマンド browse にサブコマンドでブラウザ(safari, chrome, opera, ...)を与え、\n最後の引数で渡された URL が開く。URL が渡されなければ、ブラウザの起動のみ行う。\n</code></pre>\n<p>なお、確認はすべて Mac OS X 10.8 上 の zsh で行っている。</p>\n<h3>初期化</h3>\n<pre><code>$ git clone git://github.com/37signals/sub.git browse\n$ cd browse\n$ ./prepare.sh browse\n# 以下のメッセージが表示される\n\nPreparing your 'browse' sub!\nDone! Enjoy your new sub! If you're happy with your sub, run:\n\n    rm -rf .git\n    git init\n    git add .\n    git commit -m 'Starting off browse'\n    ./bin/browse init\n\nMade a mistake? Want to make a different sub? Run:\n    git add .\n    git checkout -f\nThanks for making a sub!\n</code></pre>\n<p>言われたとおり、コマンドを実行</p>\n<pre><code>$ rm -rf .git\n$ git init\n$ git add .\n$ git commit -m 'Starting off foo'\n$ ./bin/foo init\n# 以下のメッセージが表示される。パスは作業ディレクトリに応じて変わる。\n\n# Load browse automatically by adding\n# the following to ~/.zshenv:\n\neval \"$(/XXXXXXXX/browse/bin/browse init -)\"\n</code></pre>\n<p>最後に表示されるコマンドを実行することにより、補完が有効になる(XXXXXXXX は作業ディレクトリに応じて変わる)。<code>browse he[tab]</code> を実行してみよう。</p>\n<pre><code>$ browse help\nUsage: browse &#x3C;command> [&#x3C;args>]\nSome useful browse commands are:\n   commands               List all browse commands\n\nSee 'browse help &#x3C;command>' for information on a specific command.\n</code></pre>\n<p>無事ヘルプが表示されたら、セットアップはうまくいっている。</p>\n<h3>サブコマンド作成</h3>\n<p>まずはディレクトリ構造を見てみよう。</p>\n<pre><code>$ gfind ! -path './.git/*'\n.\n./.git\n./bin\n./bin/browse\n./completions\n./completions/browse.bash\n./completions/browse.zsh\n./libexec\n./libexec/browse\n./libexec/browse-commands\n./libexec/browse-completions\n./libexec/browse-help\n./libexec/browse-init\n./libexec/browse-sh-shell\n./LICENSE\n./share\n./share/browse\n./share/browse/example\n</code></pre>\n<p>libexec/browse-SUBCOMMAND  形式でファイルを作れば、サブコマンドを追加できる。早速追加してみよう。</p>\n<pre><code>$ vim libexec/browse-safari\n\n    #!/usr/bin/env bash\n    set -e\n    open -a safari $1\n    \n$ chomod a+x libexec/browse-safari\n</code></pre>\n<p>サブコマンドはシェル補完できるので、<code>browse saf[tab] http://google.com</code> といった入力が可能。問題が無ければブラウザが起動する。 ただ、これだけだと使い方がわかりづらいので、ヘルプを追加してみる。</p>\n<pre><code>$ vim libexec/browse-safari\n\n    #!/usr/bin/env bash\n    #\n    # Usage: browse safari [URL]\n    # Summary: safari で指定の URL を開く\n    # Help: safari を利用して、引数で渡された URL を開く\n    # 何も URL を指定しなければ、ブラウザの起動のみ\n    \n    set -e\n    \n    open -a safari $1\n</code></pre>\n<p>ヘルプに反映されていることを確認。</p>\n<pre><code>$ browse help safari\nUsage: browse safari [URL]\n\nsafari を利用して、引数で渡された URL を開く\n何も URL を指定しなければ、ブラウザの起動のみ\n</code></pre>\n<p>引数なしの <code>help</code> もメッセージが変わっている。</p>\n<pre><code>$ browse help\nUsage: browse &#x3C;command> [&#x3C;args>]\n\nSome useful browse commands are:\n   commands               List all browse commands\n   safari                 safari で指定の URL を開く\n\nSee 'browse help &#x3C;command>' for information on a specific command.\n</code></pre>\n<p>あとは、libexec-chrome, libexec-opera, ... とサブコマンドを追加していくことができる。</p>\n<h2>雑感</h2>\n<p>プログラムを書いてもシェルの補完設定までは手が回らないことが多いので、簡単にサポートしてくれる仕組みが提供されているのはかなりよかった。</p>\n<p>シェルスクリプトの書き方はかなりばらつきがあり、自分の周りでも割とフリーダムな状況になっていたので、邪魔にならない程度のフレームワークがあればいいな、と思っていた。そういう用途にも合っていると思う。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://37signals.com/svn/posts/3264-automating-with-convention-introducing-sub\">37signalsのブログでの紹介</a></li>\n<li><a href=\"https://github.com/37signals/sub\">GitHubのリポジトリ</a></li>\n</ul>\n"}},"__N_SSG":true}